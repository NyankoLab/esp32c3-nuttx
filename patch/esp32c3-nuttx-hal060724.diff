diff --git a/arch/risc-v/Kconfig b/arch/risc-v/Kconfig
index 052954b6d0..4861e89cca 100644
--- a/arch/risc-v/Kconfig
+++ b/arch/risc-v/Kconfig
@@ -99,9 +99,11 @@ config ARCH_CHIP_ESP32C3_GENERIC
 	select ARCH_RV_ISA_C
 	select ARCH_VECNOTIRQ
 	select ARCH_HAVE_BOOTLOADER if !ESPRESSIF_SIMPLE_BOOT
+	select ARCH_HAVE_ELF_EXECUTABLE
 	select ARCH_HAVE_MPU
 	select ARCH_HAVE_RESET
 	select ARCH_HAVE_RNG
+	select ARCH_HAVE_TEXT_HEAP
 	select ARCH_HAVE_TICKLESS
 	select LIBC_ARCH_ATOMIC
 	select LIBC_ARCH_MEMCPY
diff --git a/arch/risc-v/src/cmake/Toolchain.cmake b/arch/risc-v/src/cmake/Toolchain.cmake
index d44a20096c..aa4f94c8d3 100644
--- a/arch/risc-v/src/cmake/Toolchain.cmake
+++ b/arch/risc-v/src/cmake/Toolchain.cmake
@@ -125,11 +125,7 @@ set(CMAKE_ASM_ARCHIVE_FINISH ${CMAKE_RANLIB_COMMAND})
 if(CONFIG_DEBUG_CUSTOMOPT)
   add_compile_options(${CONFIG_DEBUG_OPTLEVEL})
 elseif(CONFIG_DEBUG_FULLOPT)
-  if(CONFIG_ARCH_TOOLCHAIN_CLANG)
-    add_compile_options(-Oz)
-  else()
-    add_compile_options(-Os)
-  endif()
+  add_compile_options(-Oz)
 endif()
 
 if(NOT CONFIG_DEBUG_NOOPT)
diff --git a/arch/risc-v/src/common/espressif/Make.defs b/arch/risc-v/src/common/espressif/Make.defs
index 7002bd2b5b..2675f697cb 100644
--- a/arch/risc-v/src/common/espressif/Make.defs
+++ b/arch/risc-v/src/common/espressif/Make.defs
@@ -136,7 +136,7 @@ endif
 
 ESP_HAL_3RDPARTY_REPO   = esp-hal-3rdparty
 ifndef ESP_HAL_3RDPARTY_VERSION
-	ESP_HAL_3RDPARTY_VERSION = 20690e67695f0a8170a19ec99e2e9a13b620e94d
+	ESP_HAL_3RDPARTY_VERSION = 9bc2c73838d497b7742f37e9b5099d6c49081fce
 endif
 
 ifndef ESP_HAL_3RDPARTY_URL
diff --git a/arch/risc-v/src/common/espressif/Wireless.mk b/arch/risc-v/src/common/espressif/Wireless.mk
index 9783ac1c5f..2f6f36069e 100644
--- a/arch/risc-v/src/common/espressif/Wireless.mk
+++ b/arch/risc-v/src/common/espressif/Wireless.mk
@@ -28,7 +28,7 @@ EXTRA_LIBPATHS += -L $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$
 EXTRA_LIBPATHS += -L $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_phy$(DELIM)lib$(DELIM)$(CHIP_SERIES)
 EXTRA_LIBPATHS += -L $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_wifi$(DELIM)lib$(DELIM)$(CHIP_SERIES)
 
-EXTRA_LIBS += -lphy -lcoexist -lmesh
+EXTRA_LIBS += -lphy -lcoexist
 
 ifeq ($(CONFIG_ESPRESSIF_WIFI),y)
 
@@ -45,6 +45,41 @@ INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port$(DELIM)include
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)nuttx$(DELIM)include$(DELIM)mbedtls
 
+CHIP_CSRCS += chacha20.c
+CHIP_CSRCS += chachapoly.c
+CHIP_CSRCS += hkdf.c
+CHIP_CSRCS += net_sockets.c
+CHIP_CSRCS += pkcs12.c
+CHIP_CSRCS += poly1305.c
+CHIP_CSRCS += ssl_ciphersuites.c
+CHIP_CSRCS += ssl_client.c
+CHIP_CSRCS += ssl_msg.c
+CHIP_CSRCS += ssl_tls.c
+CHIP_CSRCS += ssl_tls12_client.c
+CHIP_CSRCS += ssl_tls12_server.c
+CHIP_CSRCS += x509.c
+CHIP_CSRCS += x509_crt.c
+CHIP_CSRCS += mbedtls_sslutils.c
+
+VPATH += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal
+VPATH += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port$(DELIM)aes
+VPATH += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port$(DELIM)aes$(DELIM)block
+VPATH += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port$(DELIM)sha$(DELIM)block
+
+INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_hw_support$(DELIM)include$(DELIM)soc$(DELIM)esp32c3
+INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port$(DELIM)aes$(DELIM)dma$(DELIM)include
+
+CHIP_CSRCS += aes_hal.c
+CHIP_CSRCS += sha_hal.c
+CHIP_CSRCS += esp_aes.c
+CHIP_CSRCS += esp_aes_common.c
+CHIP_CSRCS += esp_aes_gcm.c
+CHIP_CSRCS += esp_aes_xts.c
+CHIP_CSRCS += esp_bignum.c
+CHIP_CSRCS += esp_sha1.c
+CHIP_CSRCS += esp_sha256.c
+CHIP_CSRCS += sha.c
+
 ### Define Espressif's configs for mbedTLS
 
 CFLAGS += $(DEFINE_PREFIX)MBEDTLS_CONFIG_FILE="<mbedtls/esp_config.h>"
@@ -68,7 +103,6 @@ CHIP_CSRCS += pkcs5.c
 CHIP_CSRCS += platform_util.c
 CHIP_CSRCS += platform.c
 CHIP_CSRCS += sha1.c
-CHIP_CSRCS += sha3.c
 CHIP_CSRCS += sha256.c
 CHIP_CSRCS += sha512.c
 CHIP_CSRCS += pk.c
@@ -82,9 +116,9 @@ CHIP_CSRCS += md5.c
 CHIP_CSRCS += oid.c
 CHIP_CSRCS += pem.c
 CHIP_CSRCS += hmac_drbg.c
+CHIP_CSRCS += hash_info.c
 CHIP_CSRCS += rsa_alt_helpers.c
 CHIP_CSRCS += ecdh.c
-CHIP_CSRCS += pk_ecc.c
 
 VPATH += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)mbedtls$(DELIM)port
 
@@ -113,7 +147,6 @@ CFLAGS += $(DEFINE_PREFIX)IEEE8021X_EAPOL
 CFLAGS += $(DEFINE_PREFIX)USE_WPA2_TASK
 CFLAGS += $(DEFINE_PREFIX)CONFIG_SHA256
 CFLAGS += $(DEFINE_PREFIX)CONFIG_SAE
-CFLAGS += $(DEFINE_PREFIX)USE_WPS_TASK
 
 ifeq ($(CONFIG_ESPRESSIF_WIFI_ENABLE_SAE_PK),y)
 CFLAGS += $(DEFINE_PREFIX)CONFIG_SAE_PK
@@ -224,11 +257,11 @@ INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)$(WIFI_WPA_SUPPLICANT)$(DELIM)
 CHIP_CSRCS += esp_common.c
 CHIP_CSRCS += esp_hostap.c
 CHIP_CSRCS += esp_wpa_main.c
+CHIP_CSRCS += esp_wpa2.c
 CHIP_CSRCS += esp_wpa3.c
 CHIP_CSRCS += esp_wpas_glue.c
 CHIP_CSRCS += esp_owe.c
 CHIP_CSRCS += esp_scan.c
-CHIP_CSRCS += esp_wps.c
 
 VPATH += $(WIFI_WPA_SUPPLICANT)$(DELIM)esp_supplicant$(DELIM)src$(DELIM)crypto
 
diff --git a/arch/risc-v/src/common/espressif/esp_irq.c b/arch/risc-v/src/common/espressif/esp_irq.c
index e9beb217cd..a3d49fdc41 100644
--- a/arch/risc-v/src/common/espressif/esp_irq.c
+++ b/arch/risc-v/src/common/espressif/esp_irq.c
@@ -115,7 +115,8 @@ static volatile uint8_t g_irq_map[NR_IRQS];
  * devices.
  */
 
-static uint32_t g_cpuint_freelist = ESP_CPUINT_PERIPHSET;
+static uint32_t g_cpuint_freelist = ESP_CPUINT_PERIPHSET & \
+                                    ~ESP_WIRELESS_RESERVE_INT;
 
 /* This bitmask has an 1 if the int should be disabled
  * when the flash is disabled.
diff --git a/arch/risc-v/src/common/espressif/esp_start.c b/arch/risc-v/src/common/espressif/esp_start.c
index 625439296e..c3509143cf 100644
--- a/arch/risc-v/src/common/espressif/esp_start.c
+++ b/arch/risc-v/src/common/espressif/esp_start.c
@@ -54,9 +54,8 @@
 #include "spi_flash_mmap.h"
 #include "rom/cache.h"
 
-#include "bootloader_init.h"
-
 #ifdef CONFIG_ESPRESSIF_SIMPLE_BOOT
+#include "bootloader_init.h"
 #include "bootloader_flash_priv.h"
 #include "esp_rom_uart.h"
 #include "esp_rom_sys.h"
@@ -405,8 +404,6 @@ void __esp_start(void)
       ets_printf("Hardware init failed, aborting\n");
       while (true);
     }
-#else
-  bootloader_clear_bss_section();
 #endif
 
 #if defined(CONFIG_ESPRESSIF_BOOTLOADER_MCUBOOT) || \
@@ -478,6 +475,15 @@ void __esp_start(void)
 
   showprogress('A');
 
+  /* Clear .bss. We'll do this inline (vs. calling memset) just to be
+   * certain that there are no issues with the state of global variables.
+   */
+
+  for (uint32_t *dest = (uint32_t *)_sbss; dest < (uint32_t *)_ebss; )
+    {
+      *dest++ = 0;
+    }
+
   /* Setup the syscall table needed by the ROM code */
 
   esp_setup_syscall_table();
diff --git a/arch/risc-v/src/common/espressif/esp_wifi_init.c b/arch/risc-v/src/common/espressif/esp_wifi_init.c
index 4939ef9ff4..dc54d3cfef 100644
--- a/arch/risc-v/src/common/espressif/esp_wifi_init.c
+++ b/arch/risc-v/src/common/espressif/esp_wifi_init.c
@@ -35,7 +35,7 @@
 #include "esp_sleep.h"
 #include "esp_private/esp_clk.h"
 #include "esp_wpa.h"
-#include "private/esp_coexist_internal.h"
+#include "esp_coexist_internal.h"
 #include "esp_phy_init.h"
 #include "esp_private/phy.h"
 
@@ -463,3 +463,8 @@ esp_err_t esp_wifi_init(const wifi_init_config_t *config)
 
   return result;
 }
+
+uint32_t mesh_sta_auth_expire_time(void)
+{
+  return 0;
+}
diff --git a/arch/risc-v/src/common/espressif/esp_wifi_utils.h b/arch/risc-v/src/common/espressif/esp_wifi_utils.h
index 738fbbed08..17914d9554 100644
--- a/arch/risc-v/src/common/espressif/esp_wifi_utils.h
+++ b/arch/risc-v/src/common/espressif/esp_wifi_utils.h
@@ -45,6 +45,8 @@ extern "C"
  * Public Function Prototypes
  ****************************************************************************/
 
+struct iwreq;
+
 /****************************************************************************
  * Name: esp_wifi_start_scan
  *
diff --git a/arch/risc-v/src/esp32c3/Make.defs b/arch/risc-v/src/esp32c3/Make.defs
index 97e5963f4b..e5b1a6e2c1 100644
--- a/arch/risc-v/src/esp32c3/Make.defs
+++ b/arch/risc-v/src/esp32c3/Make.defs
@@ -28,4 +28,8 @@ CHIP_CSRCS += esp_coex_adapter.c esp_wifi_adapter.c
 EXTRA_LIBS += -lcore -lnet80211 -lpp
 endif
 
+ifeq ($(CONFIG_ARCH_USE_TEXT_HEAP),y)
+CHIP_CSRCS += esp32c3_textheap.c
+endif
+
 CFLAGS += ${DEFINE_PREFIX}_RETARGETABLE_LOCKING
diff --git a/arch/risc-v/src/esp32c3/esp_coex_adapter.c b/arch/risc-v/src/esp32c3/esp_coex_adapter.c
index 555363c72c..d994285bd0 100644
--- a/arch/risc-v/src/esp32c3/esp_coex_adapter.c
+++ b/arch/risc-v/src/esp32c3/esp_coex_adapter.c
@@ -41,11 +41,11 @@
 #include "esp_timer.h"
 #include "soc/rtc.h"
 #include "esp_private/esp_clk.h"
-#include "private/esp_coexist_adapter.h"
+#include "esp_coexist_adapter.h"
 #include "rom/ets_sys.h"
 #include "soc/soc_caps.h"
 #include "soc/system_reg.h"
-#include "private/esp_modem_wrapper.h"
+#include "esp_modem_wrapper.h"
 
 /****************************************************************************
  * Pre-processor Definitions
diff --git a/arch/risc-v/src/esp32c3/esp_wifi_adapter.c b/arch/risc-v/src/esp32c3/esp_wifi_adapter.c
index dd453ab82d..1602dd7e9d 100644
--- a/arch/risc-v/src/esp32c3/esp_wifi_adapter.c
+++ b/arch/risc-v/src/esp32c3/esp_wifi_adapter.c
@@ -74,9 +74,9 @@
 #include "esp_private/esp_clk.h"
 #include "os.h"
 #include "esp_smartconfig.h"
-#include "private/esp_coexist_internal.h"
+#include "esp_coexist_internal.h"
 #include "rom/ets_sys.h"
-#include "private/esp_modem_wrapper.h"
+#include "esp_modem_wrapper.h"
 
 #include "esp_wlan.h"
 #include "esp_wifi_adapter.h"
@@ -282,8 +282,6 @@ int32_t esp_event_post_wrapper(const char *event_base,
                                uint32_t ticks);
 static void wifi_apb80m_request_wrapper(void);
 static void wifi_apb80m_release_wrapper(void);
-static void esp_phy_enable_wrapper(void);
-static void esp_phy_disable_wrapper(void);
 static void timer_arm_wrapper(void *timer, uint32_t tmout, bool repeat);
 static void wifi_reset_mac_wrapper(void);
 static void wifi_rtc_enable_iso_wrapper(void);
@@ -329,8 +327,6 @@ static void *coex_schm_curr_phase_get_wrapper(void);
 static int coex_register_start_cb_wrapper(int (* cb)(void));
 static int coex_schm_process_restart_wrapper(void);
 static int coex_schm_register_cb_wrapper(int type, int(*cb)(int));
-static int coex_schm_flexible_period_set_wrapper(uint8_t period);
-static uint8_t coex_schm_flexible_period_get_wrapper(void);
 static void esp_empty_wrapper(void);
 
 /* Second block of functions
@@ -505,8 +501,8 @@ wifi_osi_funcs_t g_wifi_osi_funcs =
       esp_empty_wrapper,
   ._wifi_apb80m_request = wifi_apb80m_request_wrapper,
   ._wifi_apb80m_release = wifi_apb80m_release_wrapper,
-  ._phy_disable = esp_phy_disable_wrapper,
-  ._phy_enable = esp_phy_enable_wrapper,
+  ._phy_disable = esp_phy_disable,
+  ._phy_enable = esp_phy_enable,
   ._phy_update_country_info = esp_phy_update_country_info,
   ._read_mac = esp_read_mac_wrapper,
   ._timer_arm = timer_arm_wrapper,
@@ -568,8 +564,6 @@ wifi_osi_funcs_t g_wifi_osi_funcs =
   ._coex_register_start_cb = coex_register_start_cb_wrapper,
   ._coex_schm_process_restart = coex_schm_process_restart_wrapper,
   ._coex_schm_register_cb = coex_schm_register_cb_wrapper,
-  ._coex_schm_flexible_period_set = coex_schm_flexible_period_set_wrapper,
-  ._coex_schm_flexible_period_get = coex_schm_flexible_period_get_wrapper,
   ._magic = ESP_WIFI_OS_ADAPTER_MAGIC,
 };
 
@@ -1567,48 +1561,6 @@ static void IRAM_ATTR wifi_apb80m_release_wrapper(void)
 #endif
 }
 
-/****************************************************************************
- * Name: esp_phy_enable_wrapper
- *
- * Description:
- *   This function enables the WiFi PHY. It first enables the PHY for the
- *   WiFi modem, then sets the WiFi PHY enable flag to 1.
- *
- * Input Parameters:
- *   None
- *
- * Returned Value:
- *   None
- *
- ****************************************************************************/
-
-static void esp_phy_enable_wrapper(void)
-{
-  esp_phy_enable(PHY_MODEM_WIFI);
-  phy_wifi_enable_set(1);
-}
-
-/****************************************************************************
- * Name: esp_phy_disable_wrapper
- *
- * Description:
- *   This function disables the WiFi PHY. It first sets the WiFi PHY enable
- *   flag to 0, then disables the PHY for the WiFi modem.
- *
- * Input Parameters:
- *   None
- *
- * Returned Value:
- *   None
- *
- ****************************************************************************/
-
-static void esp_phy_disable_wrapper(void)
-{
-  phy_wifi_enable_set(0);
-  esp_phy_disable(PHY_MODEM_WIFI);
-}
-
 /****************************************************************************
  * Name: timer_arm_wrapper
  *
@@ -2393,60 +2345,6 @@ static int coex_schm_register_cb_wrapper(int type, int(*cb)(int))
 #endif
 }
 
-/****************************************************************************
- * Name: coex_schm_flexible_period_set_wrapper
- *
- * Description:
- *   This function sets the coexistence scheme flexible period. If the
- *   coexistence power management feature is enabled
- *   (CONFIG_ESP_COEX_POWER_MANAGEMENT), it calls the function
- *   coex_schm_flexible_period_set with the given period and returns its
- *   result. If the feature is not enabled, it returns 0.
- *
- * Input Parameters:
- *   period - The flexible period to set.
- *
- * Returned Value:
- *   ESP_OK on success, or the result of coex_schm_flexible_period_set.
- *
- ****************************************************************************/
-
-static int coex_schm_flexible_period_set_wrapper(uint8_t period)
-{
-#if CONFIG_ESP_COEX_POWER_MANAGEMENT
-  return coex_schm_flexible_period_set(period);
-#else
-  return 0;
-#endif
-}
-
-/****************************************************************************
- * Name: coex_schm_flexible_period_get_wrapper
- *
- * Description:
- *   This function gets the coexistence scheme flexible period. If the
- *   coexistence power management feature is enabled
- *   (CONFIG_ESP_COEX_POWER_MANAGEMENT), it calls the function
- *   coex_schm_flexible_period_get and returns its result. If the feature is
- *   not enabled, it returns 1.
- *
- * Input Parameters:
- *   None
- *
- * Returned Value:
- *   The coexistence scheme flexible period.
- *
- ****************************************************************************/
-
-static uint8_t coex_schm_flexible_period_get_wrapper(void)
-{
-#if CONFIG_ESP_COEX_POWER_MANAGEMENT
-  return coex_schm_flexible_period_get();
-#else
-  return 1;
-#endif
-}
-
 /****************************************************************************
  * Name: esp_empty_wrapper
  *
diff --git a/arch/risc-v/src/esp32c3/hal_esp32c3.mk b/arch/risc-v/src/esp32c3/hal_esp32c3.mk
index 19d92770ef..e12dc422ac 100644
--- a/arch/risc-v/src/esp32c3/hal_esp32c3.mk
+++ b/arch/risc-v/src/esp32c3/hal_esp32c3.mk
@@ -22,9 +22,6 @@
 
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)nuttx$(DELIM)include
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)nuttx$(DELIM)$(CHIP_SERIES)$(DELIM)include
-INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)bootloader_flash$(DELIM)include
-INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)include
-INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)private_include
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)driver$(DELIM)twai$(DELIM)include
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)driver$(DELIM)spi$(DELIM)include
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)efuse$(DELIM)include
@@ -62,6 +59,9 @@ INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY
 INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)spi_flash$(DELIM)include$(DELIM)spi_flash
 
 ifeq ($(CONFIG_ESPRESSIF_SIMPLE_BOOT),y)
+  INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)include
+  INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)private_include
+  INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)bootloader_flash$(DELIM)include
   INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)spi_flash$(DELIM)include
   INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)spi_flash$(DELIM)include$(DELIM)spi_flash
   INCLUDES += $(INCDIR_PREFIX)$(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_app_format$(DELIM)include
@@ -69,17 +69,15 @@ endif
 
 # Linker scripts
 
-ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.api.ld
-ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.eco3.ld
 ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.ld
-ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.libgcc.ld
+ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.eco3.ld
+ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.api.ld
 ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.newlib.ld
 ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).rom.version.ld
 ARCHSCRIPT += $(ARCH_SRCDIR)$(DELIM)chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)ld$(DELIM)$(CHIP_SERIES).peripherals.ld
 
 # Source files
 
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_init.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)efuse$(DELIM)src$(DELIM)esp_efuse_api.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)efuse$(DELIM)src$(DELIM)esp_efuse_utility.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)efuse$(DELIM)$(CHIP_SERIES)$(DELIM)esp_efuse_fields.c
@@ -108,7 +106,6 @@ CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_hw_support$(DELIM)port$(DELIM)$(CHIP_SERIES)$(DELIM)sar_periph_ctrl.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_hw_support$(DELIM)port$(DELIM)$(CHIP_SERIES)$(DELIM)systimer.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_phy$(DELIM)src$(DELIM)lib_printf.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_phy$(DELIM)src$(DELIM)phy_common.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_phy$(DELIM)src$(DELIM)phy_init.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_rom$(DELIM)patches$(DELIM)esp_rom_systimer.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_system$(DELIM)esp_err.c
@@ -117,18 +114,17 @@ CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)esp_system$(DELIM)port$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)system_internal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)adc_hal_common.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)brownout_hal.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)cache_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)efuse_hal.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)gdma_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)gpio_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)ledc_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)ledc_hal_iram.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)systimer_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)timer_hal.c
+CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)timer_hal_iram.c
+CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)cache_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)mpu_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)mmu_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)rmt_hal.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)i2c_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)spi_hal.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)spi_hal_iram.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)hal$(DELIM)twai_hal.c
@@ -148,14 +144,13 @@ CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)gpio_periph.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)ledc_periph.c
 CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)rmt_periph.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)i2c_periph.c
-CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)soc$(DELIM)$(CHIP_SERIES)$(DELIM)temperature_sensor_periph.c
 
 ifeq ($(CONFIG_ESPRESSIF_SIMPLE_BOOT),y)
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)nuttx$(DELIM)src$(DELIM)bootloader_banner_wrap.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_console.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_console_loader.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)${CHIP_SERIES}$(DELIM)bootloader_${CHIP_SERIES}.c
+  CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_init.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_common.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)src$(DELIM)bootloader_common_loader.c
   CHIP_CSRCS += chip$(DELIM)$(ESP_HAL_3RDPARTY_REPO)$(DELIM)components$(DELIM)bootloader_support$(DELIM)bootloader_flash$(DELIM)src$(DELIM)bootloader_flash.c
diff --git a/binfmt/libelf/libelf_symbols.c b/binfmt/libelf/libelf_symbols.c
index bc865c61d8..f665e7f8fd 100644
--- a/binfmt/libelf/libelf_symbols.c
+++ b/binfmt/libelf/libelf_symbols.c
@@ -306,6 +306,8 @@ int elf_symvalue(FAR struct elf_loadinfo_s *loadinfo, FAR Elf_Sym *sym,
           {
             berr("SHN_UNDEF: Exported symbol \"%s\" not found\n",
                  loadinfo->iobuffer);
+            printf("SHN_UNDEF: Exported symbol \"%s\" not found\n",
+                 loadinfo->iobuffer);
             return -ENOENT;
           }
 
diff --git a/boards/risc-v/esp32c3/common/scripts/esp32c3_sections.ld b/boards/risc-v/esp32c3/common/scripts/esp32c3_sections.ld
index cc2661327c..9f78f898a5 100644
--- a/boards/risc-v/esp32c3/common/scripts/esp32c3_sections.ld
+++ b/boards/risc-v/esp32c3/common/scripts/esp32c3_sections.ld
@@ -18,15 +18,12 @@
  *
  ****************************************************************************/
 
-#include "common.ld"
-
 /* Default entry point: */
 
 ENTRY(__start);
 
 SECTIONS
 {
-#ifdef CONFIG_ESPRESSIF_BOOTLOADER_MCUBOOT
   .metadata :
   {
     /* Magic for load header */
@@ -57,280 +54,6 @@ SECTIONS
     LONG(LOADADDR(.dram0.data))
     LONG(SIZEOF(.dram0.data))
   } >metadata
-#endif
-
-  .iram0.text :
-  {
-    _iram_start = ABSOLUTE(.);
-
-    /* Vectors go to start of IRAM */
-
-    KEEP(*(.exception_vectors.text));
-    . = ALIGN(4);
-
-    *(.iram1)
-    *(.iram1.*)
-
-    *libsched.a:irq_dispatch.*(.text .text.* .literal .literal.*)
-
-    *libarch.a:*brownout.*(.text .text.* .literal .literal.*)
-    *libarch.a:*cpu.*(.text .text.* .literal .literal.*)
-    *libarch.a:*gpio_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*periph_ctrl.*(.text .text.* .literal .literal.*)
-    *libarch.a:*clk.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_clk.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_clk_tree.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_clk_tree_common.*(.text .text.* .literal .literal.*)
-    *libarch.a:*clk_tree_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*rtc_init.*(.text .text.* .literal .literal.*)
-    *libarch.a:*regi2c_ctrl.*(.text .text.* .literal .literal.*)
-    *libarch.a:*gpio_periph.*(.text .text.* .literal .literal.*)
-    *libarch.a:*rtc_clk.*(.text .text.* .literal .literal.*)
-    *libarch.a:*rtc_clk_init.*(.text .text.* .literal .literal.*)
-    *libarch.a:*rtc_sleep.*(.text .text.* .literal .literal.*)
-    *libarch.a:*rtc_time.*(.text .text.* .literal .literal.*)
-    *libarch.a:*systimer.*(.text .text.* .literal .literal.*)
-    *libarch.a:*systimer_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*uart_hal_iram.*(.text .text.* .literal .literal.*)
-    *libarch.a:*wdt_hal_iram.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_banner_wrap.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_init.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_common.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_common_loader.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_console.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_console_loader.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_esp32c3.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_flash.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_flash_config_esp32c3.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_clock_init.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_clock_loader.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_efuse.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_panic.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_mem.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_random.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_random_esp32c3.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_image_format.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_soc.*(.text .text.* .literal .literal.*)
-    *libarch.a:*bootloader_sha.*(.text .text.* .literal .literal.*)
-    *libarch.a:*flash_encrypt.*(.text .text.* .literal .literal.*)
-    *libarch.a:*cache_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*uart_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*mpu_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*mmu_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*uart_periph.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_rom_uart.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_rom_sys.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_rom_spiflash.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_efuse_fields.*(.text .text.* .literal .literal.*)
-    *libarch.a:*esp_efuse_api_key.*(.text .text.* .literal .literal.*)
-    *libarch.a:*efuse_hal.*(.text .text.* .literal .literal.*)
-    *libarch.a:*log.*(.text .text.* .literal .literal.*)
-    *libarch.a:*log_noos.*(.text .text.* .literal .literal.*)
-    *libarch.a:esp_spiflash.*(.literal .text .literal.* .text.*)
-
-    *libc.a:sq_remlast.*(.literal .text .literal.* .text.*)
-
-    esp_head.*(.literal .text .literal.* .text.*)
-    esp_start.*(.literal .text .literal.* .text.*)
-
-    *libesp_wifi.a:esp_adapter.*(.literal.coex_pti_get_wrapper .text.coex_pti_get_wrapper)
-    *libesp_wifi.a:wifi_netif.*(.literal.wifi_sta_receive .text.wifi_sta_receive)
-    *libesp_wifi.a:wifi_netif.*(.literal.wifi_transmit_wrap .text.wifi_transmit_wrap)
-
-    *libhal.a:timer_hal.*(.literal.timer_hal_capture_and_get_counter_value .text.timer_hal_capture_and_get_counter_value)
-
-    *(.wifi0iram.*)
-    *(.wifirxiram.*)
-    *(.wifislpiram.*)
-    *(.wifiorslpiram.*)
-    *(.wifislprxiram.*)
-
-  } >iram0_0_seg AT > ROM
-
-  /* This section is required to skip .iram0.text area because iram0_0_seg
-   * and dram0_0_seg reflect the same address space on different buses.
-   */
-
-  .dram0.dummy (NOLOAD):
-  {
-    . = ORIGIN(dram0_0_seg) + _iram_end - _iram_start;
-  } >dram0_0_seg
-
-  .noinit (NOLOAD):
-  {
-    /* This section contains data that is not initialized during load,
-     * or during the application's initialization sequence.
-     */
-
-    *(.noinit)
-    *(.noinit.*)
-  } >dram0_0_seg
-
-  .dram0.data :
-  {
-    . = ALIGN (16);
-    _data_start = ABSOLUTE(.);
-    _sdata = ABSOLUTE(.);
-    *(.data)
-    *(.data.*)
-    *(.gnu.linkonce.d.*)
-    *(.data1)
-    __global_pointer$ = . + 0x800;
-    *(.sdata)
-    *(.sdata.*)
-    *(.gnu.linkonce.s.*)
-    *(.sdata2)
-    *(.sdata2.*)
-    *(.gnu.linkonce.s2.*)
-    *(.jcr)
-    *(.dram1)
-    *(.dram1.*)
-
-    *libsched.a:irq_dispatch.*(.rodata .rodata.*)
-
-    *libarch.a:*brownout.*(.rodata .rodata.*)
-    *libarch.a:*cpu.*(.rodata .rodata.*)
-    *libarch.a:*gpio_hal.*(.rodata .rodata.*)
-    *libarch.a:*periph_ctrl.*(.rodata .rodata.*)
-    *libarch.a:*clk.*(.rodata .rodata.*)
-    *libarch.a:*esp_clk.*(.rodata .rodata.*)
-    *libarch.a:*esp_clk_tree.*(.rodata .rodata.*)
-    *libarch.a:*esp_clk_tree_common.*(.rodata .rodata.*)
-    *libarch.a:*clk_tree_hal.*(.rodata .rodata.*)
-    *libarch.a:*rtc_init.*(.rodata .rodata.*)
-    *libarch.a:*regi2c_ctrl.*(.rodata .rodata.*)
-    *libarch.a:*gpio_periph.*(.rodata .rodata.*)
-    *libarch.a:*rtc_clk.*(.rodata .rodata.*)
-    *libarch.a:*rtc_clk_init.*(.rodata .rodata.*)
-    *libarch.a:*rtc_sleep.*(.rodata .rodata.*)
-    *libarch.a:*rtc_time.*(.rodata .rodata.*)
-    *libarch.a:*systimer.*(.rodata .rodata.*)
-    *libarch.a:*systimer_hal.*(.rodata .rodata.*)
-    *libarch.a:*uart_hal_iram.*(.rodata .rodata.*)
-    *libarch.a:*wdt_hal_iram.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_banner_wrap.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_init.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_common.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_common_loader.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_console.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_console_loader.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_esp32c3.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_flash.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_flash_config_esp32c3.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_clock_init.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_clock_loader.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_efuse.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_panic.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_mem.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_random.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_random_esp32c3.*(.rodata .rodata.*)
-    *libarch.a:*esp_image_format.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_soc.*(.rodata .rodata.*)
-    *libarch.a:*bootloader_sha.*(.rodata .rodata.*)
-    *libarch.a:*flash_encrypt.*(.rodata .rodata.*)
-    *libarch.a:*cache_hal.*(.rodata .rodata.*)
-    *libarch.a:*uart_hal.*(.rodata .rodata.*)
-    *libarch.a:*mpu_hal.*(.rodata .rodata.*)
-    *libarch.a:*mmu_hal.*(.rodata .rodata.*)
-    *libarch.a:*uart_periph.*(.rodata .rodata.*)
-    *libarch.a:*esp_rom_uart.*(.rodata .rodata.*)
-    *libarch.a:*esp_rom_sys.*(.rodata .rodata.*)
-    *libarch.a:*esp_rom_spiflash.*(.rodata .rodata.*)
-    *libarch.a:*esp_efuse_fields.*(.rodata .rodata.*)
-    *libarch.a:*esp_efuse_api_key.*(.rodata .rodata.*)
-    *libarch.a:*efuse_hal.*(.rodata .rodata.*)
-    *libarch.a:*log.*(.rodata .rodata.*)
-    *libarch.a:*log_noos.*(.rodata .rodata.*)
-    *libarch.a:esp_spiflash.*(.rodata .rodata.*)
-
-    esp_head.*(.rodata .rodata.*)
-    esp_start.*(.rodata .rodata.*)
-
-    . = ALIGN(4);
-    _edata = ABSOLUTE(.);
-    _data_end = ABSOLUTE(.);
-  } >dram0_0_seg AT > ROM
-
-  /* Shared RAM */
-
-  .dram0.bss (NOLOAD) :
-  {
-    . = ALIGN (8);
-    _bss_start = ABSOLUTE(.);
-    _sbss = ABSOLUTE(.);
-    *(.dynsbss)
-    *(.sbss)
-    *(.sbss.*)
-    *(.gnu.linkonce.sb.*)
-    *(.scommon)
-    *(.sbss2)
-    *(.sbss2.*)
-    *(.gnu.linkonce.sb2.*)
-    *(.dynbss)
-    *(.bss)
-    *(.bss.*)
-    *(.share.mem)
-    *(.gnu.linkonce.b.*)
-    *(COMMON)
-
-    . = ALIGN (8);
-    _ebss = ABSOLUTE(.);
-    _bss_end = ABSOLUTE(.);
-  } >dram0_0_seg
-
-  _image_irom_vma = ADDR(.flash.text);
-  _image_irom_lma = LOADADDR(.flash.text);
-  _image_irom_size = LOADADDR(.flash.text) + SIZEOF(.flash.text) - _image_irom_lma;
-
-  .flash.text : ALIGN(0xFFFF)
-  {
-    _stext = .;
-    _instruction_reserved_start = ABSOLUTE(.);  /* This is a symbol marking the flash.text start, this can be used for mmu driver to maintain virtual address */
-    _text_start = ABSOLUTE(.);
-
-    *(EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifi0iram EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifi0iram.*)
-    *(.wifiextrairam .wifiextrairam.*)
-    *(EXCLUDE_FILE(*libpp.a) .wifiorslpiram EXCLUDE_FILE(*libpp.a) .wifiorslpiram.*)
-    *(EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifirxiram EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifirxiram.*)
-    *(.wifislpiram .wifislpiram.*)
-    *(EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifislprxiram EXCLUDE_FILE(*libnet80211.a *libpp.a) .wifislprxiram.*)
-
-    *libesp_wifi.a:esp_adapter.*(.text .text.clear_intr_wrapper .text.coex_deinit_wrapper .text.coex_disable_wrapper .text.coex_enable_wrapper .text.coex_init_wrapper .text.coex_register_start_cb_wrapper .text.coex_schm_curr_period_get_wrapper .text.coex_schm_curr_phase_get_wrapper .text.coex_schm_flexible_period_get_wrapper .text.coex_schm_flexible_period_set_wrapper .text.coex_schm_interval_get_wrapper .text.coex_schm_process_restart_wrapper .text.coex_schm_register_cb_wrapper .text.coex_schm_status_bit_clear_wrapper .text.coex_schm_status_bit_set_wrapper .text.coex_wifi_channel_set_wrapper .text.coex_wifi_request_wrapper .text.disable_intr_wrapper .text.enable_intr_wrapper .text.esp_event_post_wrapper .text.esp_log_write_wrapper .text.esp_log_writev_wrapper .text.esp_phy_disable_wrapper .text.esp_phy_enable_wrapper .text.esp_read_mac_wrapper .text.event_group_wait_bits_wrapper .text.get_time_wrapper .text.mutex_create_wrapper .text.mutex_delete_wrapper .text.nvs_open_wrapper .text.queue_create_wrapper .text.queue_recv_wrapper .text.queue_send_to_back_wrapper .text.queue_send_to_front_wrapper .text.queue_send_wrapper .text.recursive_mutex_create_wrapper .text.set_intr_wrapper .text.set_isr_wrapper .text.task_create_pinned_to_core_wrapper .text.task_create_wrapper .text.task_get_max_priority_wrapper .text.wifi_clock_disable_wrapper .text.wifi_clock_enable_wrapper .text.wifi_create_queue .text.wifi_create_queue_wrapper .text.wifi_delete_queue .text.wifi_delete_queue_wrapper .text.wifi_reset_mac_wrapper .text.wifi_thread_semphr_free .text.wifi_thread_semphr_get_wrapper)
-
-    *(.literal .text .literal.* .text.* .stub .gnu.warning .gnu.linkonce.literal.* .gnu.linkonce.t.*.literal .gnu.linkonce.t.*)
-    *(.irom0.text) /* catch stray ICACHE_RODATA_ATTR */
-    *(.fini.literal)
-    *(.fini)
-    *(.gnu.version)
-
-    _text_end = ABSOLUTE(.);
-    _instruction_reserved_end = ABSOLUTE(.);  /* This is a symbol marking the flash.text end, this can be used for mmu driver to maintain virtual address */
-    _etext = .;
-
-    /* Similar to _iram_start, this symbol goes here so it is
-     * resolved by addr2line in preference to the first symbol in
-     * the flash.text segment.
-     */
-
-    _flash_cache_start = ABSOLUTE(0);
-  } >default_code_seg AT > ROM
-
-  .flash_rodata_dummy (NOLOAD) : ALIGN(0xFFFF)
-  {
-    /* Start at the same alignment constraint than .flash.text */
-
-    /* . = ALIGN(ALIGNOF(.flash.text)); */
-
-    /* Create an empty gap as big as .flash.text section */
-
-    . = . + SIZEOF(.flash.text);
-
-    /* Prepare the alignment of the section above. Few bytes (0x20) must be
-     * added for the mapping header.
-     */
-
-    /*. = ALIGN(0x10000) + 0x20; */
-  } >default_rodata_seg
 
   _image_drom_vma = ADDR(.flash.rodata);
   _image_drom_lma = LOADADDR(.flash.rodata);
@@ -347,20 +70,12 @@ SECTIONS
     . = ALIGN(ALIGNOF(.flash.rodata));
   } >default_rodata_seg
 
-  .flash.rodata : ALIGN(0xFFFF)
+  .flash.rodata :
   {
     _srodata = ABSOLUTE(.);
     *(EXCLUDE_FILE (*libarch.a:esp_spiflash.* esp_head.* esp_start.*) .rodata)
     *(EXCLUDE_FILE (*libarch.a:esp_spiflash.* esp_head.* esp_start.*) .rodata.*)
 
-    *(.rodata)
-    *(.rodata.*)
-    *(.rodata_wlog_verbose.*)
-    *(.rodata_wlog_debug.*)
-    *(.rodata_wlog_info.*)
-    *(.rodata_wlog_warning.*)
-    *(.rodata_wlog_error.*)
-
     *(.srodata.*)
 
     *(.irom1.text) /* catch stray ICACHE_RODATA_ATTR */
@@ -376,14 +91,13 @@ SECTIONS
     KEEP(*(.eh_frame))
     . = (. + 7) & ~ 3;
 
-    /* C++ constructor and destructor tables:
-     * RISC-V GCC is configured with --enable-initfini-array so it emits an
-     * .init_array section instead.
-     */
+    /* C++ constructor and destructor tables, properly ordered: */
 
     _sinit = ABSOLUTE(.);
-    KEEP (*(EXCLUDE_FILE (*crtend.* *crtbegin.*) .init_array.*))
-    KEEP (*(EXCLUDE_FILE (*crtend.* *crtbegin.*) .init_array))
+    KEEP (*crtbegin.o(.ctors))
+    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
+    KEEP (*(SORT(.ctors.*)))
+    KEEP (*(.ctors))
     _einit = ABSOLUTE(.);
     KEEP (*crtbegin.o(.dtors))
     KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
@@ -399,6 +113,7 @@ SECTIONS
     *(.xt_except_desc_end)
     *(.dynamic)
     *(.gnu.version_d)
+    . = ALIGN(4);               /* This table MUST be 4-byte aligned */
     _erodata = ABSOLUTE(.);
 
     /* Literals are also RO data. */
@@ -409,7 +124,7 @@ SECTIONS
     *(.gnu.linkonce.lit4.*)
     _lit4_end = ABSOLUTE(.);
     . = ALIGN(4);
-  } >default_rodata_seg AT > ROM
+  } >drom0_0_seg AT>ROM
 
   .flash.rodata_noload (NOLOAD) :
   {
@@ -421,6 +136,103 @@ SECTIONS
     . = ALIGN (4);
   } > default_rodata_seg AT > ROM
 
+  .iram0.text :
+  {
+    _iram_start = ABSOLUTE(.);
+
+    /* Vectors go to start of IRAM */
+
+    KEEP(*(.exception_vectors.text));
+    . = ALIGN(4);
+
+    *(.iram1)
+    *(.iram1.*)
+    *libarch.a:*cache_hal.*(.text .text.* .literal .literal.*)
+    *libarch.a:*mpu_hal.*(.text .text.* .literal .literal.*)
+    *libarch.a:*mmu_hal.*(.text .text.* .literal .literal.*)
+    *libarch.a:esp_spiflash.*(.literal .text .literal.* .text.*)
+    esp_head.*(.literal .text .literal.* .text.*)
+    esp_start.*(.literal .text .literal.* .text.*)
+    *(.wifi0iram .wifi0iram.*)
+    *(.wifirxiram .wifirxiram.*)
+    *(.wifislpiram .wifislpiram.*)
+    *(.wifislprxiram .wifislprxiram.*)
+  } >iram0_0_seg AT>ROM
+
+  .dram0.dummy (NOLOAD):
+  {
+    /* This section is required to skip .iram0.text area because iram0_0_seg
+     * and dram0_0_seg reflect the same address space on different buses.
+     */
+
+    . = ORIGIN(dram0_0_seg) + _iram_end - _iram_start;
+  } >dram0_0_seg
+
+  .noinit (NOLOAD):
+  {
+    /* This section contains data that is not initialized during load,
+     * or during the application's initialization sequence.
+     */
+
+    . = ALIGN(8);
+    *(.noinit)
+    *(.noinit.*)
+    . = ALIGN(8);
+  } >dram0_0_seg
+
+  .dram0.data :
+  {
+    /* .data initialized on power-up in ROMed configurations. */
+
+    _sdata = ABSOLUTE(.);
+    KEEP (*(.data))
+    KEEP (*(.data.*))
+    KEEP (*(.gnu.linkonce.d.*))
+    KEEP (*(.data1))
+    __global_pointer$ = . + 0x800;
+    KEEP (*(.sdata))
+    KEEP (*(.sdata.*))
+    KEEP (*(.gnu.linkonce.s.*))
+    KEEP (*(.sdata2))
+    KEEP (*(.sdata2.*))
+    KEEP (*(.gnu.linkonce.s2.*))
+    KEEP (*(.jcr))
+    *(.dram1 .dram1.*)
+    *libarch.a:*cache_hal.*(.rodata .rodata.*)
+    *libarch.a:*mpu_hal.*(.rodata .rodata.*)
+    *libarch.a:*mmu_hal.*(.rodata .rodata.*)
+    *libarch.a:esp_spiflash.*(.rodata .rodata.*)
+    esp_head.*(.rodata .rodata.*)
+    esp_start.*(.rodata .rodata.*)
+    _edata = ABSOLUTE(.);
+  } >dram0_0_seg AT>ROM
+
+  /* Shared RAM */
+
+  .dram0.bss (NOLOAD) :
+  {
+    /* .bss initialized on power-up */
+
+    . = ALIGN (8);
+    _sbss = ABSOLUTE(.);
+    *(.dynsbss)
+    *(.sbss)
+    *(.sbss.*)
+    *(.gnu.linkonce.sb.*)
+    *(.scommon)
+    *(.sbss2)
+    *(.sbss2.*)
+    *(.gnu.linkonce.sb2.*)
+    *(.dynbss)
+    KEEP (*(.bss))
+    *(.bss.*)
+    *(.share.mem)
+    *(.gnu.linkonce.b.*)
+    *(COMMON)
+    . = ALIGN(32);
+    _ebss = ABSOLUTE(.);
+  } >dram0_0_seg
+
   /* Marks the end of IRAM code segment */
 
   .iram0.text_end (NOLOAD) :
@@ -433,7 +245,7 @@ SECTIONS
     . = ALIGN(16);
     *(.iram.data)
     *(.iram.data*)
-  } >iram0_0_seg
+  } >iram0_0_seg AT>ROM
 
   .iram0.bss (NOLOAD) :
   {
@@ -445,13 +257,53 @@ SECTIONS
     _iram_end = ABSOLUTE(.);
   } >iram0_0_seg
 
-  /* RTC fast memory holds RTC wake stub code !*/
+  _image_irom_vma = ADDR(.flash.text);
+  _image_irom_lma = LOADADDR(.flash.text);
+  _image_irom_size = LOADADDR(.flash.text) + SIZEOF(.flash.text) - _image_irom_lma;
+
+  /* The alignment of the ".flash.text" output section is forced to
+   * 0x0000FFFF (64KB) to ensure that it will be allocated at the beginning
+   * of the next available Flash block.
+   * This is required to meet the following constraint from the external
+   * flash MMU:
+   *    VMA % 64KB == LMA % 64KB
+   * i.e. the lower 16 bits of both the virtual address (address seen by the
+   * CPU) and the load address (physical address of the external flash) must
+   * be equal.
+   */
+
+  .flash_text_dummy (NOLOAD) : ALIGN(0x0000FFFF)
+  {
+    /* This section is required to skip .flash.rodata area because irom0_0_seg
+     * and drom0_0_seg reflect the same address space on different buses.
+     */
+
+    . = SIZEOF(.flash.rodata);
+  } >irom0_0_seg
+
+  .flash.text : ALIGN(0x0000FFFF)
+  {
+    _stext = .;
+    _instruction_reserved_start = ABSOLUTE(.);  /* This is a symbol marking the flash.text start, this can be used for mmu driver to maintain virtual address */
+    _text_start = ABSOLUTE(.);
+
+    *(.literal .text .literal.* .text.* .stub .gnu.warning .gnu.linkonce.literal.* .gnu.linkonce.t.*.literal .gnu.linkonce.t.*)
+    *(.irom0.text) /* catch stray ICACHE_RODATA_ATTR */
+    *(.fini.literal)
+    *(.fini)
+    *(.gnu.version)
+    . = ALIGN(4);
+
+    _text_end = ABSOLUTE(.);
+    _instruction_reserved_end = ABSOLUTE(.);  /* This is a symbol marking the flash.text end, this can be used for mmu driver to maintain virtual address */
+    _etext = .;
+  } >irom0_0_seg AT>ROM
 
   .rtc.text :
   {
     . = ALIGN(4);
     *(.rtc.literal .rtc.text)
-  } >rtc_iram_seg
+  } >rtc_iram_seg AT>ROM
 
   /* RTC BSS section. */
 
@@ -460,15 +312,11 @@ SECTIONS
     *(.rtc.bss)
   } >rtc_iram_seg
 
-  /* RTC data section holds RTC wake stub data/rodata. */
-
   .rtc.data :
   {
     *(.rtc.data)
-    *(.rtc.data.*)
     *(.rtc.rodata)
-    *(.rtc.rodata.*)
-  } >rtc_iram_seg
+  } >rtc_iram_seg AT>ROM
 
   /* This section holds RTC data that should have fixed addresses.
    * The data are not initialized at power-up and are retained during deep sleep.
@@ -477,6 +325,7 @@ SECTIONS
   {
     . = ALIGN(4);
     _rtc_reserved_start = ABSOLUTE(.);
+
     /* New data can only be added here to ensure existing data are not moved.
        Because data have adhered to the end of the segment and code is relied on it.
        >> put new data here << */
@@ -487,7 +336,4 @@ SECTIONS
   } > rtc_reserved_seg
 
   _rtc_reserved_length = _rtc_reserved_end - _rtc_reserved_start;
-  ASSERT((_rtc_reserved_length <= LENGTH(rtc_reserved_seg)),
-          "RTC reserved segment data does not fit.")
-
-}
+}
\ No newline at end of file
diff --git a/boards/risc-v/esp32c3/common/src/esp_board_spiflash.c b/boards/risc-v/esp32c3/common/src/esp_board_spiflash.c
index 7e1c40ccb7..7ee8150239 100644
--- a/boards/risc-v/esp32c3/common/src/esp_board_spiflash.c
+++ b/boards/risc-v/esp32c3/common/src/esp_board_spiflash.c
@@ -58,18 +58,105 @@
  * Private Types
  ****************************************************************************/
 
+#ifdef CONFIG_ESPRESSIF_HAVE_OTA_PARTITION
+
+struct ota_partition_s
+{
+  uint32_t    offset;          /* Partition offset from the beginning of MTD */
+  uint32_t    size;            /* Partition size in bytes */
+  const char *devpath;         /* Partition device path */
+};
+
+#endif
+
 /****************************************************************************
  * Private Function Prototypes
  ****************************************************************************/
 
+#ifdef CONFIG_ESPRESSIF_HAVE_OTA_PARTITION
+static int init_ota_partitions(void);
+#endif
+
 /****************************************************************************
  * Private Data
  ****************************************************************************/
 
+#ifdef CONFIG_ESPRESSIF_HAVE_OTA_PARTITION
+static const struct ota_partition_s g_ota_partition_table[] =
+{
+  {
+    .offset  = CONFIG_ESPRESSIF_OTA_PRIMARY_SLOT_OFFSET,
+    .size    = CONFIG_ESPRESSIF_OTA_SLOT_SIZE,
+    .devpath = CONFIG_ESPRESSIF_OTA_PRIMARY_SLOT_DEVPATH
+  },
+  {
+    .offset  = CONFIG_ESPRESSIF_OTA_SECONDARY_SLOT_OFFSET,
+    .size    = CONFIG_ESPRESSIF_OTA_SLOT_SIZE,
+    .devpath = CONFIG_ESPRESSIF_OTA_SECONDARY_SLOT_DEVPATH
+  },
+  {
+    .offset  = CONFIG_ESPRESSIF_OTA_SCRATCH_OFFSET,
+    .size    = CONFIG_ESPRESSIF_OTA_SCRATCH_SIZE,
+    .devpath = CONFIG_ESPRESSIF_OTA_SCRATCH_DEVPATH
+  }
+};
+#endif
+
 /****************************************************************************
  * Private Functions
  ****************************************************************************/
 
+/****************************************************************************
+ * Name: init_ota_partitions
+ *
+ * Description:
+ *   Initialize partitions that are dedicated to firmware OTA update.
+ *
+ * Input Parameters:
+ *   None.
+ *
+ * Returned Value:
+ *   Zero on success; a negated errno value on failure.
+ *
+ ****************************************************************************/
+
+#ifdef CONFIG_ESPRESSIF_HAVE_OTA_PARTITION
+static int init_ota_partitions(void)
+{
+  struct mtd_dev_s *mtd;
+#ifdef CONFIG_BCH
+  char blockdev[18];
+#endif
+  int ret = OK;
+
+  for (int i = 0; i < nitems(g_ota_partition_table); ++i)
+    {
+      const struct ota_partition_s *part = &g_ota_partition_table[i];
+      mtd = esp_spiflash_alloc_mtdpart(part->offset, part->size);
+
+      ret = ftl_initialize(i, mtd);
+      if (ret < 0)
+        {
+          ferr("ERROR: Failed to initialize the FTL layer: %d\n", ret);
+          return ret;
+        }
+
+#ifdef CONFIG_BCH
+      snprintf(blockdev, sizeof(blockdev), "/dev/mtdblock%d", i);
+
+      ret = bchdev_register(blockdev, part->devpath, false);
+      if (ret < 0)
+        {
+          ferr("ERROR: bchdev_register %s failed: %d\n", part->devpath, ret);
+          return ret;
+        }
+#endif
+    }
+
+  return ret;
+}
+#endif
+
 /****************************************************************************
  * Name: setup_smartfs
  *
@@ -406,6 +493,14 @@ int board_spiflash_init(void)
 
   esp_spiflash_init();
 
+#ifdef CONFIG_ESPRESSIF_HAVE_OTA_PARTITION
+  ret = init_ota_partitions();
+  if (ret < 0)
+    {
+      return ret;
+    }
+#endif
+
   ret = init_storage_partition();
   if (ret < 0)
     {
diff --git a/boards/risc-v/esp32c3/esp32c3-generic/src/Make.defs b/boards/risc-v/esp32c3/esp32c3-generic/src/Make.defs
index b23cab8ea0..500ed940a5 100644
--- a/boards/risc-v/esp32c3/esp32c3-generic/src/Make.defs
+++ b/boards/risc-v/esp32c3/esp32c3-generic/src/Make.defs
@@ -38,6 +38,10 @@ ifeq ($(CONFIG_ARCH_BUTTONS),y)
   CSRCS += esp32c3_buttons.c
 endif
 
+ifeq ($(CONFIG_ETC_ROMFS),y)
+  RCRAWS = etc/init.d/rcS
+endif
+
 DEPPATH += --dep-path board
 VPATH += :board
 CFLAGS += ${INCDIR_PREFIX}$(TOPDIR)$(DELIM)arch$(DELIM)$(CONFIG_ARCH)$(DELIM)src$(DELIM)board$(DELIM)board
diff --git a/libs/libc/libc.csv b/libs/libc/libc.csv
index 1374e6714b..12958b1344 100644
--- a/libs/libc/libc.csv
+++ b/libs/libc/libc.csv
@@ -212,6 +212,7 @@
 "pthread_condattr_init","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","int","FAR pthread_condattr_t *"
 "pthread_condattr_setclock","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","int","FAR pthread_condattr_t *","clockid_t"
 "pthread_create","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","int","FAR pthread_t *","FAR const pthread_attr_t *","pthread_startroutine_t","pthread_addr_t"
+"pthread_exit","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","noreturn","pthread_addr_t"
 "pthread_getname_np","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","int","pthread_t","char *","size_t"
 "pthread_getspecific","pthread.h","!defined(CONFIG_DISABLE_PTHREAD) && CONFIG_TLS_NELEM > 0","FAR void *","pthread_key_t"
 "pthread_gettid_np","pthread.h","!defined(CONFIG_DISABLE_PTHREAD)","pid_t","pthread_t"
@@ -254,8 +255,13 @@
 "scandir","dirent.h","","int","FAR const char *","FAR struct dirent ***","FAR int (*)(const struct dirent *)|FAR void *","FAR void *"
 "sched_get_priority_max","sched.h","","int","int"
 "sched_get_priority_min","sched.h","","int","int"
+"sem_destroy","semaphore.h","","int","FAR sem_t *"
 "sem_getvalue","semaphore.h","","int","FAR sem_t *","FAR int *"
 "sem_init","semaphore.h","","int","FAR sem_t *","int","unsigned int"
+"sem_post","semaphore.h","","int","FAR sem_t *"
+"sem_timedwait","semaphore.h","","int","FAR sem_t *","FAR const struct timespec *"
+"sem_trywait","semaphore.h","","int","FAR sem_t *"
+"sem_wait","semaphore.h","","int","FAR sem_t *"
 "setlocale","locale.h","defined(CONFIG_LIBC_LOCALE)","FAR char *","int","FAR const char *"
 "setlogmask","syslog.h","","int","int"
 "setpriority","sys/resource.h","","int","int","id_t","int"
@@ -292,6 +298,7 @@
 "strerror","string.h","","FAR char *","int"
 "strerror_r","string.h","","int","int","FAR char *","size_t"
 "strftime","time.h","","size_t","FAR char *","size_t","FAR const char *","FAR const struct tm *"
+"strlcpy","string.h","","size_t","FAR char *","FAR const char *","size_t"
 "strlen","string.h","","size_t","FAR const char *"
 "strncasecmp","strings.h","","int","FAR const char *","FAR const char *","size_t"
 "strncat","string.h","","FAR char *","FAR char *","FAR const char *","size_t"
diff --git a/libs/libc/machine/risc-v/arch_elf.c b/libs/libc/machine/risc-v/arch_elf.c
index 8e826bddc5..43ee769719 100644
--- a/libs/libc/machine/risc-v/arch_elf.c
+++ b/libs/libc/machine/risc-v/arch_elf.c
@@ -78,6 +78,7 @@ static struct rname_code_s _rname_table[] =
   {"CALL_PLT", R_RISCV_CALL_PLT},
   {"BRANCH", R_RISCV_BRANCH},
   {"JAL", R_RISCV_JAL},
+  {"ALIGN", R_RISCV_ALIGN},
   {"RVC_JUMP", R_RISCV_RVC_JUMP},
   {"RVC_BRANCH", R_RISCV_RVC_BRANCH},
   {"32_PCREL", R_RISCV_32_PCREL},
@@ -104,6 +105,19 @@ static const char *_get_rname(int type)
   return "?????";
 }
 
+/****************************************************************************
+ * Name: _extract_bits
+ *
+ * Description:
+ *   Copied from ELF_riscv.cpp (LLVM)
+ *
+ ****************************************************************************/
+
+static uint32_t _extract_bits(uint32_t num, int low, int size)
+{
+  return (num & (((1 << size) - 1) << low)) >> low;
+}
+
 /****************************************************************************
  * Name: _get_val, set_val, _add_val
  *
@@ -394,7 +408,7 @@ int up_relocateadd(const Elf_Rela *rel, const Elf_Sym *sym,
 
   relotype = ELF_R_TYPE(rel->r_info);
 
-  if (relotype == R_RISCV_RELAX)
+  if (relotype == R_RISCV_RELAX || relotype == R_RISCV_ALIGN)
     {
       /* NOTE: RELAX has no symbol, so just return */
 
@@ -561,12 +575,21 @@ int up_relocateadd(const Elf_Rela *rel, const Elf_Sym *sym,
           uint32_t val = _get_val((uint16_t *)addr) & 0xfe000f80;
 
           /* NOTE: we assume that a compiler adds an immediate value */
+          if (offset != 0 && val == 0)
+            {
+              uint32_t imm12 = _extract_bits(offset, 12, 1) << 31;
+              uint32_t imm10_5 = _extract_bits(offset, 5, 6) << 25;
+              uint32_t imm4_1 = _extract_bits(offset, 1, 4) << 8;
+              uint32_t imm11 = _extract_bits(offset, 11, 1) << 7;
 
-          ASSERT(offset && val);
-
-          binfo("offset for Bx=%ld (0x%lx) (val=0x%08" PRIx32 ") "
-                "already set!\n",
-                offset, offset, val);
+              _add_val((uint16_t *)addr, imm12 | imm10_5 | imm4_1 | imm11);
+            }
+          else
+            {
+              binfo("offset for Bx=%ld (0x%lx) (val=0x%08" PRIx32 ") "
+                    "already set!\n",
+                    offset, offset, val);
+            }
         }
         break;
 
@@ -583,13 +606,22 @@ int up_relocateadd(const Elf_Rela *rel, const Elf_Sym *sym,
           offset = (long)sym->st_value + (long)rel->r_addend - (long)addr;
           uint32_t val = _get_val((uint16_t *)addr) & 0xfffff000;
 
-          ASSERT(offset && val);
-
           /* NOTE: we assume that a compiler adds an immediate value */
+          if (offset != 0 && val == 0)
+            {
+              uint32_t imm20 = _extract_bits(offset, 20, 1) << 31;
+              uint32_t imm10_1 = _extract_bits(offset, 1, 10) << 21;
+              uint32_t imm11 = _extract_bits(offset, 11, 1) << 20;
+              uint32_t imm19_12 = _extract_bits(offset, 12, 8) << 12;
 
-          binfo("offset for JAL=%ld (0x%lx) (val=0x%08" PRIx32 ") "
-                "already set!\n",
-                offset, offset, val);
+              _add_val((uint16_t *)addr, imm20 | imm10_1 | imm11 | imm19_12);
+            }
+          else
+            {
+              binfo("offset for JAL=%ld (0x%lx) (val=0x%08" PRIx32 ") "
+                    "already set!\n",
+                    offset, offset, val);
+            }
         }
         break;
 
@@ -692,8 +724,25 @@ int up_relocateadd(const Elf_Rela *rel, const Elf_Sym *sym,
 
           uint16_t val = (*(uint16_t *)addr) & 0x1ffc;
 
-          binfo("offset for C.J=%ld (0x%lx) (val=0x%04x) already set!\n",
-                offset, offset, val);
+          /* NOTE: we assume that a compiler adds an immediate value */
+          if (offset != 0 && val == 0)
+            {
+              uint16_t imm11 = _extract_bits(offset, 11, 1) << 12;
+              uint16_t imm4 = _extract_bits(offset, 4, 1) << 11;
+              uint16_t imm9_8 = _extract_bits(offset, 8, 2) << 9;
+              uint16_t imm10 = _extract_bits(offset, 10, 1) << 8;
+              uint16_t imm6 = _extract_bits(offset, 6, 1) << 7;
+              uint16_t imm7 = _extract_bits(offset, 7, 1) << 6;
+              uint16_t imm3_1 = _extract_bits(offset, 1, 3) << 3;
+              uint16_t imm5 = _extract_bits(offset, 5, 1) << 2;
+
+              _add_val((uint16_t *)addr, imm11 | imm4 | imm9_8 | imm10 | imm6 | imm7 | imm3_1 | imm5);
+            }
+          else
+            {
+              binfo("offset for C.J=%ld (0x%lx) (val=0x%04x) already set!\n",
+                    offset, offset, val);
+            }
         }
         break;
 
@@ -713,11 +762,21 @@ int up_relocateadd(const Elf_Rela *rel, const Elf_Sym *sym,
           uint16_t val = (*(uint16_t *)addr) & 0x1c7c;
 
           /* NOTE: we assume that a compiler adds an immediate value */
+          if (offset != 0 && val == 0)
+            {
+              uint16_t imm8 = _extract_bits(offset, 8, 1) << 12;
+              uint16_t imm4_3 = _extract_bits(offset, 3, 2) << 10;
+              uint16_t imm7_6 = _extract_bits(offset, 6, 2) << 5;
+              uint16_t imm2_1 = _extract_bits(offset, 1, 2) << 3;
+              uint16_t imm5 = _extract_bits(offset, 5, 1) << 2;
 
-          ASSERT(offset && val);
-
-          binfo("offset for C.Bx=%ld (0x%lx) (val=0x%04x) already set!\n",
-                offset, offset, val);
+              _add_val((uint16_t *)addr, imm8 | imm4_3 | imm7_6 | imm2_1 | imm5);
+            }
+          else
+            {
+              binfo("offset for C.Bx=%ld (0x%lx) (val=0x%04x) already set!\n",
+                    offset, offset, val);
+            }
         }
         break;
       case R_RISCV_32_PCREL:
diff --git a/syscall/syscall.csv b/syscall/syscall.csv
index c26caca14a..fa22d18216 100644
--- a/syscall/syscall.csv
+++ b/syscall/syscall.csv
@@ -1,5 +1,6 @@
 "_assert","assert.h","","void","FAR const char *","int","FAR const char *","FAR void *"
 "_exit","unistd.h","","noreturn","int"
+"accept","sys/socket.h","defined(CONFIG_NET)","int","int","FAR struct sockaddr *","FAR socklen_t *"
 "accept4","sys/socket.h","defined(CONFIG_NET)","int","int","FAR struct sockaddr *","FAR socklen_t *","int"
 "adjtime","sys/time.h","defined(CONFIG_CLOCK_TIMEKEEPING)","int","FAR const struct timeval *","FAR struct timeval *"
 "aio_cancel","aio.h","defined(CONFIG_FS_AIO)","int","int","FAR struct aiocb *"
@@ -63,6 +72,7 @@
 "lseek","unistd.h","","off_t","int","off_t","int"
 "lstat","sys/stat.h","","int","FAR const char *","FAR struct stat *"
 "lutimens","sys/stat.h","","int","FAR const char *","const struct timespec [2]|FAR const struct timespec *"
+"mallinfo","malloc.h","","struct mallinfo","void"
 "mkdir","sys/stat.h","!defined(CONFIG_DISABLE_MOUNTPOINT)","int","FAR const char *","mode_t"
 "mmap","sys/mman.h","","FAR void *","FAR void *","size_t","int","int","int","off_t"
 "modhandle","nuttx/module.h","defined(CONFIG_MODULE)","FAR void *","FAR const char *"
@@ -184,6 +194,7 @@
 "symlink","unistd.h","defined(CONFIG_PSEUDOFS_SOFTLINKS)","int","FAR const char *","FAR const char *"
 "sync","unistd.h","","void"
 "sysinfo","sys/sysinfo.h","","int","FAR struct sysinfo *"
+"system","stdlib.h","","int","FAR const char *"
 "task_create","sched.h","!defined(CONFIG_BUILD_KERNEL)", "int","FAR const char *","int","int","main_t","FAR char * const []|FAR char * const *"
 "task_delete","sched.h","!defined(CONFIG_BUILD_KERNEL)","int","pid_t"
 "task_restart","sched.h","!defined(CONFIG_BUILD_KERNEL)","int","pid_t"
@@ -199,6 +210,7 @@
 "timerfd_gettime","sys/timerfd.h","defined(CONFIG_TIMER_FD)","int","int","FAR struct itimerspec *"
 "timerfd_settime","sys/timerfd.h","defined(CONFIG_TIMER_FD)","int","int","int","FAR const struct itimerspec *","FAR struct itimerspec *"
 "umount2","sys/mount.h","!defined(CONFIG_DISABLE_MOUNTPOINT)","int","FAR const char *","unsigned int"
+"uname","sys/utsname.h","","int","FAR struct utsname *"
 "unlink","unistd.h","!defined(CONFIG_DISABLE_MOUNTPOINT)","int","FAR const char *"
 "unsetenv","stdlib.h","!defined(CONFIG_DISABLE_ENVIRON)","int","FAR const char *"
 "up_fork","nuttx/arch.h","defined(CONFIG_ARCH_HAVE_FORK)","pid_t"
@@ -207,3 +219,296 @@
 "waitid","sys/wait.h","defined(CONFIG_SCHED_WAITPID) && defined(CONFIG_SCHED_HAVE_PARENT)","int","idtype_t","id_t"," FAR siginfo_t *","int"
 "waitpid","sys/wait.h","defined(CONFIG_SCHED_WAITPID)","pid_t","pid_t","FAR int *","int"
 "write","unistd.h","","ssize_t","int","FAR const void *","size_t"
+"up_enable_irq","nuttx/arch.h","!defined(CONFIG_ARCH_NOINTC)","void","int"
+"up_disable_irq","nuttx/arch.h","!defined(CONFIG_ARCH_NOINTC)","void","int"
+"irq_attach","nuttx/irq.h","","int","int","xcpt_t","FAR void *"
+"dhcpc_open","../../apps/include/netutils/dhcpc.h","","FAR void *","FAR const char *, FAR const void *, int"
+"dhcpc_request","../../apps/include/netutils/dhcpc.h","","int","FAR void *, FAR struct dhcpc_state *"
+"dhcpc_request_async","../../apps/include/netutils/dhcpc.h","","int","FAR void *, dhcpc_callback_t"
+"dhcpc_cancel","../../apps/include/netutils/dhcpc.h","","void","FAR void *"
+"dhcpc_close","../../apps/include/netutils/dhcpc.h","","void","FAR void *"
+"dhcpd_run","../../apps/include/netutils/dhcpd.h","","int","FAR const char *"
+"dhcpd_start","../../apps/include/netutils/dhcpd.h","","int","FAR const char *"
+"dhcpd_stop","../../apps/include/netutils/dhcpd.h","","int","void"
+"dhcpd_set_startip","../../apps/include/netutils/dhcpd.h","","int","in_addr_t"
+"dhcpd_set_routerip","../../apps/include/netutils/dhcpd.h","","int","in_addr_t"
+"dhcpd_set_netmask","../../apps/include/netutils/dhcpd.h","","int","in_addr_t"
+"dhcpd_set_dnsip","../../apps/include/netutils/dhcpd.h","","int","in_addr_t"
+"httpd_open","../../apps/netutils/webserver/httpd.h","","int","const char *","struct httpd_fs_file *"
+"httpd_openindex","../../apps/netutils/webserver/httpd.h","","int","struct httpd_state *"
+"httpd_close","../../apps/netutils/webserver/httpd.h","","int","struct httpd_fs_file *"
+"httpd_senderror","../../apps/netutils/webserver/httpd.h","","int","struct httpd_state *","int"
+"httpd_sendfile","../../apps/netutils/webserver/httpd.h","","int","struct httpd_state *"
+"httpd_parse","../../apps/netutils/webserver/httpd.h","","int","struct httpd_state *"
+"httpd_send_datachunk","../../apps/netutils/webserver/httpd.h","","int","int","void *","int","bool"
+"httpd_send_headers","../../apps/netutils/webserver/httpd.h","","int","struct httpd_state *","int","int"
+"mqtt_sync","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *"
+"mqtt_init","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *","mqtt_pal_socket_handle","uint8_t *","size_t","uint8_t *","size_t","void (*)(void **, struct mqtt_response_publish *)"
+"mqtt_init_reconnect","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","void","struct mqtt_client *","void (*)(struct mqtt_client *, void **)","void *","void (*)(void **, struct mqtt_response_publish *)"
+"mqtt_reinit","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","void","struct mqtt_client *, mqtt_pal_socket_handle, uint8_t *, size_t, uint8_t *, size_t"
+"mqtt_connect","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *","const char *","const char *","const void *","size_t","const char*","const char*","uint8_t","uint16_t"
+"mqtt_publish","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *","const char *","const void *","size_t","uint8_t"
+"mqtt_subscribe","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *","const char *","int"
+"mqtt_unsubscribe","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *","const char *"
+"mqtt_disconnect","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *"
+"mqtt_reconnect","../../apps/netutils/mqttc/MQTT-C/include/mqtt.h","","enum MQTTErrors","struct mqtt_client *"
+"netlib_setmacaddr","../../apps/include/netutils/netlib.h","","int","FAR const char *","FAR const uint8_t *"
+"netlib_getmacaddr","../../apps/include/netutils/netlib.h","","int","FAR const char *","FAR uint8_t *"
+"netlib_parseurl","../../apps/include/netutils/netlib.h","defined(CONFIG_NETUTILS_NETLIB_GENERICURLPARSER)","int","FAR const char *","FAR struct url_s *"
+"ntpc_dualstack_family","../../apps/include/netutils/ntpclient.h","defined(CONFIG_NETUTILS_NTPCLIENT)","void","int"
+"ntpc_start_with_list","../../apps/include/netutils/ntpclient.h","defined(CONFIG_NETUTILS_NTPCLIENT)","int","FAR const char *"
+"ntpc_start","../../apps/include/netutils/ntpclient.h","defined(CONFIG_NETUTILS_NTPCLIENT)","int","void"
+"ntpc_stop","../../apps/include/netutils/ntpclient.h","defined(CONFIG_NETUTILS_NTPCLIENT)","int","void"
+"ntpc_status","../../apps/include/netutils/ntpclient.h","defined(CONFIG_NETUTILS_NTPCLIENT)","int","struct ntpc_status_s *"
+"sslutil_webclient_tlsops","../arch/risc-v/src/common/espressif/sslutil.h","","struct webclient_tls_ops *","void"
+"wapi_get_ifup","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR int *"
+"wapi_set_ifup","../../apps/include/wireless/wapi.h","","int","int","FAR const char *"
+"wapi_set_ifdown","../../apps/include/wireless/wapi.h","","int","int","FAR const char *"
+"wapi_get_ip","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","struct in_addr *"
+"wapi_set_ip","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR const struct in_addr *"
+"wapi_get_netmask","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR struct in_addr *"
+"wapi_set_netmask","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR const struct in_addr *"
+"wapi_get_essid","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR char *","FAR enum wapi_essid_flag_e *"
+"wapi_set_essid","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR const char *","enum wapi_essid_flag_e"
+"wapi_get_mode","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR enum wapi_mode_e *"
+"wapi_set_mode","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","enum wapi_mode_e"
+"wapi_get_ap","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR struct ether_addr *"
+"wapi_set_ap","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR const struct ether_addr *"
+"wapi_make_socket","../../apps/include/wireless/wapi.h","","int","void"
+"wapi_get_sensitivity","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","FAR int *"
+"wapi_load_config","../../apps/include/wireless/wapi.h","","FAR void *","FAR const char *","FAR const char *","FAR struct wpa_wconfig_s *"
+"wapi_unload_config","../../apps/include/wireless/wapi.h","","void","FAR void *"
+"wapi_save_config","../../apps/include/wireless/wapi.h","","int","FAR const char *","FAR const char *","FAR const struct wpa_wconfig_s *"
+"wpa_driver_wext_set_key_ext","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","enum wpa_alg_e","FAR const char *","size_t"
+"wpa_driver_wext_get_key_ext","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","enum wpa_alg_e *","FAR char *","size_t *"
+"wpa_driver_wext_set_auth_param","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","int","uint32_t"
+"wpa_driver_wext_get_auth_param","../../apps/include/wireless/wapi.h","","int","int","FAR const char *","int","uint32_t *"
+"wpa_driver_wext_associate","../../apps/include/wireless/wapi.h","","int","FAR struct wpa_wconfig_s *"
+"webclient_set_defaults","../../apps/include/netutils/webclient.h","defined(CONFIG_NETUTILS_WEBCLIENT)","void","FAR struct webclient_context *"
+"webclient_perform","../../apps/include/netutils/webclient.h","defined(CONFIG_NETUTILS_WEBCLIENT)","int","FAR struct webclient_context *"
+"webclient_abort","../../apps/include/netutils/webclient.h","defined(CONFIG_NETUTILS_WEBCLIENT)","void","FAR struct webclient_context *"
+"kHAPAccessoryServerTransport_IP","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPIPAccessoryServerTransport"
+"kHAPCharacteristicType_AdministratorOnlyAccess","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_AudioFeedback","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Brightness","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CoolingThresholdTemperature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentDoorState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentHeatingCoolingState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentRelativeHumidity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentTemperature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_HeatingThresholdTemperature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Hue","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Identify","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockControlPoint","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockManagementAutoSecurityTimeout","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockLastKnownAction","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockCurrentState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockTargetState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Logs","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Manufacturer","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Model","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_MotionDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Name","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ObstructionDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_On","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_OutletInUse","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_RotationDirection","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_RotationSpeed","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Saturation","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SerialNumber","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetDoorState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetHeatingCoolingState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetRelativeHumidity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetTemperature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TemperatureDisplayUnits","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Version","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PairSetup","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PairVerify","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PairingFeatures","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PairingPairings","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_FirmwareRevision","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_HardwareRevision","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_AirParticulateDensity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_AirParticulateSize","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SecuritySystemCurrentState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SecuritySystemTargetState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_BatteryLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonMonoxideDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ContactSensorState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentAmbientLightLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentHorizontalTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentPosition","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentVerticalTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_HoldPosition","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LeakDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_OccupancyDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PositionState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ProgrammableSwitchEvent","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_StatusActive","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SmokeDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_StatusFault","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_StatusJammed","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_StatusLowBattery","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_StatusTampered","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetHorizontalTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetPosition","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetVerticalTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SecuritySystemAlarmType","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ChargingState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonMonoxideLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonMonoxidePeakLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonDioxideDetected","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonDioxideLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CarbonDioxidePeakLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_AirQuality","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ServiceSignature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_AccessoryFlags","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_LockPhysicalControls","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetAirPurifierState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentAirPurifierState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentSlatState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_FilterLifeLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_FilterChangeIndication","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ResetFilterIndication","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentFanState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_Active","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentHeaterCoolerState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetHeaterCoolerState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentHumidifierDehumidifierState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetHumidifierDehumidifierState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_WaterLevel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SwingMode","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetFanState","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SlatType","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_CurrentTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_TargetTiltAngle","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_OzoneDensity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_NitrogenDioxideDensity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SulphurDioxideDensity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PM2_5Density","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_PM10Density","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_VOCDensity","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_RelativeHumidityDehumidifierThreshold","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_RelativeHumidityHumidifierThreshold","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ServiceLabelIndex","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ServiceLabelNamespace","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ColorTemperature","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ProgramMode","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_InUse","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_SetDuration","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_RemainingDuration","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ValveType","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_IsConfigured","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ActiveIdentifier","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPCharacteristicType_ADKVersion","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_AccessoryInformation","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_GarageDoorOpener","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_LightBulb","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_LockManagement","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_LockMechanism","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Outlet","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Switch","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Thermostat","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Pairing","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_SecuritySystem","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_CarbonMonoxideSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_ContactSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Door","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_HumiditySensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_LeakSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_LightSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_MotionSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_OccupancySensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_SmokeSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_StatelessProgrammableSwitch","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_TemperatureSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Window","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_WindowCovering","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_AirQualitySensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_BatteryService","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_CarbonDioxideSensor","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_HAPProtocolInformation","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Fan","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Slat","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_FilterMaintenance","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_AirPurifier","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_HeaterCooler","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_HumidifierDehumidifier","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_ServiceLabel","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_IrrigationSystem","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Valve","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Faucet","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_CameraRTPStreamManagement","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Microphone","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"kHAPServiceType_Speaker","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristicTypes.h","defined(CONFIG_NETUTILS_HOMEKIT)","const HAPUUID"
+"HAPGetCompatibilityVersion","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","uint32_t","void"
+"HAPGetIdentification","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPGetVersion","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPGetBuild","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPAccessoryServerCreate","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *, const HAPAccessoryServerOptions *, const HAPPlatform *, const HAPAccessoryServerCallbacks *, void *"
+"HAPAccessoryServerRelease","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *"
+"HAPAccessoryServerGetState","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPAccessoryServerState","HAPAccessoryServerRef *"
+"HAPAccessoryServerIsPaired","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","bool","HAPAccessoryServerRef *"
+"HAPAccessoryServerStart","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *, const HAPAccessory *"
+"HAPAccessoryServerStartBridge","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *, const HAPAccessory *, const HAPAccessory * const *, bool"
+"HAPAccessoryServerStop","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *"
+"HAPAccessoryServerRefreshSetupPayload","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *"
+"HAPAccessoryServerEnterNFCPairingMode","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *"
+"HAPAccessoryServerExitNFCPairingMode","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *"
+"HAPAccessoryServerRaiseEvent","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *, const HAPCharacteristic *, const HAPService *, const HAPAccessory *"
+"HAPAccessoryServerRaiseEventOnSession","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPAccessoryServerRef *, const HAPCharacteristic *, const HAPService *, const HAPAccessory *, HAPSessionRef *"
+"HAPRestoreFactorySettings","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef"
+"HAPRemoveAllPairings","../../apps/netutils/homekit/HomeKitADK/HAP/HAP.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef"
+"HAPAccessorySetupGenerateRandomSetupCode","../../apps/netutils/homekit/HomeKitADK/HAP/HAPAccessorySetup.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPSetupCode *"
+"HAPCharacteristicReadRequiresAdminPermissions","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristic.h","defined(CONFIG_NETUTILS_HOMEKIT)","bool","const HAPCharacteristic *"
+"HAPCharacteristicWriteRequiresAdminPermissions","../../apps/netutils/homekit/HomeKitADK/HAP/HAPCharacteristic.h","defined(CONFIG_NETUTILS_HOMEKIT)","bool","const HAPCharacteristic *"
+"HAPDeviceIDGet","../../apps/netutils/homekit/HomeKitADK/HAP/HAPDeviceID.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPDeviceID *"
+"HAPDeviceIDGetAsString","../../apps/netutils/homekit/HomeKitADK/HAP/HAPDeviceID.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPDeviceIDString *"
+"HAPHandleNameRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationIdentifyWrite","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPBoolCharacteristicWriteRequest *, bool, void *"
+"HAPHandleAccessoryInformationManufacturerRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationModelRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationNameRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationSerialNumberRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationFirmwareRevisionRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationHardwareRevisionRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPHandleAccessoryInformationADKVersionRead","../../apps/netutils/homekit/HomeKitADK/HAP/HAPRequestHandlers+AccessoryInformation.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPAccessoryServerRef *, const HAPStringCharacteristicReadRequest *, char *, size_t, void *"
+"HAPAssertAbortInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void"
+"HAPAssertInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const char *, const char *, int"
+"HAPAssertionFailureInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const char *, const char *, int"
+"HAPPreconditionInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const char *, const char *"
+"HAPPreconditionFailureInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const char *"
+"HAPFatalErrorInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPAssert.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const char *, const char *, int"
+"HAPLogBufferInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const void *, size_t, const char *, ..."
+"HAPLogBufferInfoInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const void *, size_t, const char *, ..."
+"HAPLogBufferDebugInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const void *, size_t, const char *, ..."
+"HAPLogBufferErrorInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const void *, size_t, const char *, ..."
+"HAPLogBufferFaultInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const void *, size_t, const char *, ..."
+"HAPLogInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const char *, ..."
+"HAPLogInfoInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const char *, ..."
+"HAPLogDebugInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const char *, ..."
+"HAPLogErrorInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const char *, ..."
+"HAPLogFaultInternal","../../apps/netutils/homekit/HomeKitADK/PAL/HAPLog.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPLogObject *, const char *, ..."
+"HAPPlatformGetCompatibilityVersion","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","uint32_t","void"
+"HAPPlatformGetIdentification","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPPlatformGetVersion","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPPlatformGetBuild","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","const char *","void"
+"HAPPlatformAbort","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void"
+"HAPPlatformKeyValueStoreGet","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPPlatformKeyValueStoreDomain, HAPPlatformKeyValueStoreKey, void *, size_t, size_t *, bool *"
+"HAPPlatformKeyValueStoreSet","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPPlatformKeyValueStoreDomain, HAPPlatformKeyValueStoreKey, const void *, size_t"
+"HAPPlatformKeyValueStoreRemove","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPPlatformKeyValueStoreDomain, HAPPlatformKeyValueStoreKey"
+"HAPPlatformKeyValueStoreEnumerate","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPPlatformKeyValueStoreDomain, HAPPlatformKeyValueStoreEnumerateCallback, void *"
+"HAPPlatformKeyValueStorePurgeDomain","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformKeyValueStoreRef, HAPPlatformKeyValueStoreDomain"
+"HAPPlatformRandomNumberFill","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void *, size_t"
+"HAPPlatformRunLoopRun","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void"
+"HAPPlatformRunLoopStop","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void"
+"HAPPlatformRunLoopScheduleCallback","../../apps/netutils/homekit/HomeKitADK/PAL/HAPPlatform.h","defined(CONFIG_NETUTILS_HOMEKIT)","HAPError","HAPPlatformRunLoopCallback, void *, size_t"
+"HAPPlatformAccessorySetupCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformAccessorySetup+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformAccessorySetupRef, const HAPPlatformAccessorySetupOptions *"
+"HAPPlatformAccessorySetupDisplayCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformAccessorySetupDisplay+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformAccessorySetupDisplayRef"
+"HAPPlatformKeyValueStoreCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformKeyValueStore+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformKeyValueStoreRef, const HAPPlatformKeyValueStoreOptions *"
+"HAPPlatformRunLoopCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformRunLoop+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","const HAPPlatformRunLoopOptions *"
+"HAPPlatformRunLoopRelease","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformRunLoop+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","void"
+"HAPPlatformServiceDiscoveryCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformServiceDiscovery+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformServiceDiscoveryRef, const HAPPlatformServiceDiscoveryOptions *"
+"HAPPlatformTCPStreamManagerCreate","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformTCPStreamManagerRef, const HAPPlatformTCPStreamManagerOptions *"
+"HAPPlatformTCPStreamManagerRelease","../../apps/netutils/homekit/HomeKitADK/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","HAPPlatformTCPStreamManagerRef"
+"HAP_srp_verifier","../../apps/netutils/homekit/HomeKitADK/PAL/HAPCrypto.h","defined(CONFIG_NETUTILS_HOMEKIT)","void","uint8_t [], const uint8_t [], const uint8_t *, size_t, const uint8_t *, size_t"
\ No newline at end of file
