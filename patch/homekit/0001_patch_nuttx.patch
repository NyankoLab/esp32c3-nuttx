diff --git a/External/HTTP/util_http_reader.h b/External/HTTP/util_http_reader.h
index 57b1259..63d397b 100644
--- a/External/HTTP/util_http_reader.h
+++ b/External/HTTP/util_http_reader.h
@@ -7,7 +7,7 @@
 #ifndef UTIL_HTTP_READER_H
 #define UTIL_HTTP_READER_H
 
-#include "HAPPlatform.h"
+#include "../../PAL/HAPPlatform.h"
 
 #define util_HTTP_READER_TYPE_REQUEST  0
 #define util_HTTP_READER_TYPE_RESPONSE 1
diff --git a/External/JSON/util_json_reader.h b/External/JSON/util_json_reader.h
index e6f0dc5..2e3633c 100644
--- a/External/JSON/util_json_reader.h
+++ b/External/JSON/util_json_reader.h
@@ -7,7 +7,7 @@
 #ifndef UTIL_JSON_READER_H
 #define UTIL_JSON_READER_H
 
-#include "HAPPlatform.h"
+#include "../../PAL/HAPPlatform.h"
 
 #define util_JSON_READER_STATE_READING_WHITESPACE 0
 
diff --git a/HAP/HAP+Internal.h b/HAP/HAP+Internal.h
index dc21182..339d263 100644
--- a/HAP/HAP+Internal.h
+++ b/HAP/HAP+Internal.h
@@ -21,9 +21,9 @@ extern "C" {
 
 #include "HAP.h"
 
-#include "HAPCrypto.h"
+#include "../PAL/HAPCrypto.h"
 
-#include "util_http_reader.h"
+#include "../External/HTTP/util_http_reader.h"
 
 #include "HAPStringBuilder.h"
 
diff --git a/HAP/HAP.h b/HAP/HAP.h
index 89f40a1..43a1bc6 100644
--- a/HAP/HAP.h
+++ b/HAP/HAP.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../PAL/HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/HAP/HAPIPAccessoryServer.c b/HAP/HAPIPAccessoryServer.c
index 025cb86..8dac16f 100644
--- a/HAP/HAPIPAccessoryServer.c
+++ b/HAP/HAPIPAccessoryServer.c
@@ -8,6 +8,7 @@
 
 #if HAP_IP
 
+#include <stdlib.h>
 #include "util_base64.h"
 
 static const HAPLogObject logObject = { .subsystem = kHAP_LogSubsystem, .category = "IPAccessoryServer" };
@@ -264,10 +265,25 @@ static void HAPIPSessionDestroy(HAPIPSession* ipSession) {
     HAPLogDebug(&logObject, "session:%p:releasing session", (const void*) session);
 
     HAPRawBufferZero(&ipSession->descriptor, sizeof ipSession->descriptor);
-    HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
-    HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
-    HAPRawBufferZero(
-            ipSession->eventNotifications, ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
+    if ((size_t)ipSession->inboundBuffer.bytes & 1) {
+        free((void*)((size_t)ipSession->inboundBuffer.bytes & ~1));
+        ipSession->inboundBuffer.bytes = NULL;
+    } else {
+        HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
+    }
+    if ((size_t)ipSession->outboundBuffer.bytes & 1) {
+        free((void*)((size_t)ipSession->outboundBuffer.bytes & ~1));
+        ipSession->outboundBuffer.bytes = NULL;
+    } else {
+        HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
+    }
+    if ((size_t)ipSession->eventNotifications & 1) {
+        free((void*)((size_t)ipSession->eventNotifications & ~1));
+        ipSession->eventNotifications = NULL;
+    } else {
+        HAPRawBufferZero(
+                ipSession->eventNotifications, ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
+    }
 }
 
 static void collect_garbage(HAPAccessoryServerRef* server_) {
@@ -3667,6 +3683,30 @@ static void HandlePendingTCPStream(HAPPlatformTCPStreamManagerRef tcpStreamManag
         return;
     }
 
+    if (!ipSession->inboundBuffer.bytes) {
+        ipSession->inboundBuffer.bytes = malloc(ipSession->inboundBuffer.numBytes);
+        if (ipSession->inboundBuffer.bytes) {
+            ipSession->inboundBuffer.bytes += 1;
+        }
+    }
+    if (!ipSession->outboundBuffer.bytes) {
+        ipSession->outboundBuffer.bytes = malloc(ipSession->outboundBuffer.numBytes);
+        if (ipSession->outboundBuffer.bytes) {
+            ipSession->outboundBuffer.bytes += 1;
+        }
+    }
+    if (!ipSession->eventNotifications) {
+        ipSession->eventNotifications = malloc(ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
+        if (ipSession->eventNotifications) {
+            ipSession->eventNotifications += 1;
+        }
+    }
+    if (!ipSession->inboundBuffer.bytes || !ipSession->outboundBuffer.bytes || !ipSession->eventNotifications) {
+        HAPLog(&logObject, "Failed to allocate buffer.");
+        HAPPlatformTCPStreamClose(HAPNonnull(server->platform.ip.tcpStreamManager), tcpStream);
+        return;
+    }
+
     HAPIPSessionDescriptor* t = (HAPIPSessionDescriptor*) &ipSession->descriptor;
     HAPRawBufferZero(t, sizeof *t);
     t->server = server_;
@@ -3679,13 +3719,13 @@ static void HandlePendingTCPStream(HAPPlatformTCPStreamManagerRef tcpStreamManag
     t->inboundBuffer.position = 0;
     t->inboundBuffer.limit = ipSession->inboundBuffer.numBytes;
     t->inboundBuffer.capacity = ipSession->inboundBuffer.numBytes;
-    t->inboundBuffer.data = ipSession->inboundBuffer.bytes;
+    t->inboundBuffer.data = (void*)((size_t)ipSession->inboundBuffer.bytes & ~1);
     t->inboundBufferMark = 0;
     t->outboundBuffer.position = 0;
     t->outboundBuffer.limit = ipSession->outboundBuffer.numBytes;
     t->outboundBuffer.capacity = ipSession->outboundBuffer.numBytes;
-    t->outboundBuffer.data = ipSession->outboundBuffer.bytes;
-    t->eventNotifications = ipSession->eventNotifications;
+    t->outboundBuffer.data = (void*)((size_t)ipSession->outboundBuffer.bytes & ~1);
+    t->eventNotifications = (void*)((size_t)ipSession->eventNotifications & ~1);
     t->maxEventNotifications = ipSession->numEventNotifications;
     t->numEventNotifications = 0;
     t->numEventNotificationFlags = 0;
@@ -4069,23 +4109,23 @@ static void Create(HAPAccessoryServerRef* server_, const HAPAccessoryServerOptio
     HAPPrecondition(storage->scratchBuffer.bytes);
     HAPPrecondition(storage->sessions);
     HAPPrecondition(storage->numSessions);
-    for (size_t i = 0; i < storage->numSessions; i++) {
-        HAPIPSession* session = &storage->sessions[i];
-        HAPPrecondition(session->inboundBuffer.bytes);
-        HAPPrecondition(session->outboundBuffer.bytes);
-        HAPPrecondition(session->eventNotifications);
-    }
+//  for (size_t i = 0; i < storage->numSessions; i++) {
+//      HAPIPSession* session = &storage->sessions[i];
+//      HAPPrecondition(session->inboundBuffer.bytes);
+//      HAPPrecondition(session->outboundBuffer.bytes);
+//      HAPPrecondition(session->eventNotifications);
+//  }
     HAPRawBufferZero(storage->readContexts, storage->numReadContexts * sizeof *storage->readContexts);
     HAPRawBufferZero(storage->writeContexts, storage->numWriteContexts * sizeof *storage->writeContexts);
     HAPRawBufferZero(storage->scratchBuffer.bytes, storage->scratchBuffer.numBytes);
     for (size_t i = 0; i < storage->numSessions; i++) {
         HAPIPSession* ipSession = &storage->sessions[i];
         HAPRawBufferZero(&ipSession->descriptor, sizeof ipSession->descriptor);
-        HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
-        HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
-        HAPRawBufferZero(
-                ipSession->eventNotifications,
-                ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
+//      HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
+//      HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
+//      HAPRawBufferZero(
+//              ipSession->eventNotifications,
+//              ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
     }
     server->ip.storage = options->ip.accessoryServerStorage;
 
@@ -4104,11 +4144,11 @@ static void PrepareStart(HAPAccessoryServerRef* server_) {
     for (size_t i = 0; i < storage->numSessions; i++) {
         HAPIPSession* ipSession = &storage->sessions[i];
         HAPRawBufferZero(&ipSession->descriptor, sizeof ipSession->descriptor);
-        HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
-        HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
-        HAPRawBufferZero(
-                ipSession->eventNotifications,
-                ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
+//      HAPRawBufferZero(ipSession->inboundBuffer.bytes, ipSession->inboundBuffer.numBytes);
+//      HAPRawBufferZero(ipSession->outboundBuffer.bytes, ipSession->outboundBuffer.numBytes);
+//      HAPRawBufferZero(
+//              ipSession->eventNotifications,
+//              ipSession->numEventNotifications * sizeof *ipSession->eventNotifications);
     }
 }
 
diff --git a/HAP/HAPJSONUtils.h b/HAP/HAPJSONUtils.h
index a776c47..d881492 100644
--- a/HAP/HAPJSONUtils.h
+++ b/HAP/HAPJSONUtils.h
@@ -13,7 +13,7 @@ extern "C" {
 
 #include "HAP+Internal.h"
 
-#include "util_json_reader.h"
+#include "../External/JSON/util_json_reader.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/Crypto/MbedTLS/HAPMbedTLS.c b/PAL/Crypto/MbedTLS/HAPMbedTLS.c
index 85a6926..d470990 100644
--- a/PAL/Crypto/MbedTLS/HAPMbedTLS.c
+++ b/PAL/Crypto/MbedTLS/HAPMbedTLS.c
@@ -22,19 +22,86 @@
 #include "mbedtls/ecdh.h"
 #include "mbedtls/bignum.h"
 
+#define mbedtls_aes_crypt_ctr           esp_mbedtls_aes_crypt_ctr
+#define mbedtls_aes_free                esp_mbedtls_aes_free
+#define mbedtls_aes_init                esp_mbedtls_aes_init
+#define mbedtls_aes_setkey_enc          esp_mbedtls_aes_setkey_enc
+
+#define mbedtls_chachapoly_init         esp_mbedtls_chachapoly_init
+#define mbedtls_chachapoly_finish       esp_mbedtls_chachapoly_finish
+#define mbedtls_chachapoly_free         esp_mbedtls_chachapoly_free
+#define mbedtls_chachapoly_setkey       esp_mbedtls_chachapoly_setkey
+#define mbedtls_chachapoly_starts       esp_mbedtls_chachapoly_starts
+#define mbedtls_chachapoly_update       esp_mbedtls_chachapoly_update
+#define mbedtls_chachapoly_update_aad   esp_mbedtls_chachapoly_update_aad
+
+#define mbedtls_ecp_group_load          esp_mbedtls_ecp_group_load
+#define mbedtls_ecp_keypair_init        esp_mbedtls_ecp_keypair_init
+#define mbedtls_ecp_keypair_free        esp_mbedtls_ecp_keypair_free
+#define mbedtls_ecp_mul                 esp_mbedtls_ecp_mul
+#define mbedtls_ecp_point_read_binary   esp_mbedtls_ecp_point_read_binary
+#define mbedtls_ecp_point_write_binary  esp_mbedtls_ecp_point_write_binary
+#define mbedtls_ecp_read_key            esp_mbedtls_ecp_read_key
+
+#define mbedtls_ecdh_calc_secret        esp_mbedtls_ecdh_calc_secret
+#define mbedtls_ecdh_free               esp_mbedtls_ecdh_free
+#define mbedtls_ecdh_init               esp_mbedtls_ecdh_init
+#define mbedtls_ecdh_get_params         esp_mbedtls_ecdh_get_params
+
+#define mbedtls_hkdf                    esp_mbedtls_hkdf
+
+#define mbedtls_md_free                 esp_mbedtls_md_free
+#define mbedtls_md_info_from_type       esp_mbedtls_md_info_from_type
+#define mbedtls_md_init                 esp_mbedtls_md_init
+#define mbedtls_md_hmac_finish          esp_mbedtls_md_hmac_finish
+#define mbedtls_md_hmac_starts          esp_mbedtls_md_hmac_starts
+#define mbedtls_md_hmac_update          esp_mbedtls_md_hmac_update
+#define mbedtls_md_setup                esp_mbedtls_md_setup
+#define mbedtls_md_starts               esp_mbedtls_md_starts
+
+#define mbedtls_mpi_add_mpi             esp_mbedtls_mpi_add_mpi
+#define mbedtls_mpi_cmp_int             esp_mbedtls_mpi_cmp_int
+#define mbedtls_mpi_exp_mod             esp_mbedtls_mpi_exp_mod
+#define mbedtls_mpi_init                esp_mbedtls_mpi_init
+#define mbedtls_mpi_free                esp_mbedtls_mpi_free
+#define mbedtls_mpi_mod_mpi             esp_mbedtls_mpi_mod_mpi
+#define mbedtls_mpi_mul_mpi             esp_mbedtls_mpi_mul_mpi
+#define mbedtls_mpi_read_binary         esp_mbedtls_mpi_read_binary
+#define mbedtls_mpi_write_binary        esp_mbedtls_mpi_write_binary
+
+#define mbedtls_pkcs5_pbkdf2_hmac       esp_mbedtls_pkcs5_pbkdf2_hmac
+
+#define mbedtls_sha1_finish             esp_mbedtls_sha1_finish
+#define mbedtls_sha1_free               esp_mbedtls_sha1_free
+#define mbedtls_sha1_init               esp_mbedtls_sha1_init
+#define mbedtls_sha1_starts             esp_mbedtls_sha1_starts
+#define mbedtls_sha1_update             esp_mbedtls_sha1_update
+
+#define mbedtls_sha256_finish           esp_mbedtls_sha256_finish
+#define mbedtls_sha256_free             esp_mbedtls_sha256_free
+#define mbedtls_sha256_init             esp_mbedtls_sha256_init
+#define mbedtls_sha256_starts           esp_mbedtls_sha256_starts
+#define mbedtls_sha256_update           esp_mbedtls_sha256_update
+
+#define mbedtls_sha512_finish           esp_mbedtls_sha512_finish
+#define mbedtls_sha512_free             esp_mbedtls_sha512_free
+#define mbedtls_sha512_init             esp_mbedtls_sha512_init
+#define mbedtls_sha512_starts           esp_mbedtls_sha512_starts
+#define mbedtls_sha512_update           esp_mbedtls_sha512_update
+
 static void sha512_init(mbedtls_sha512_context* ctx) {
     mbedtls_sha512_init(ctx);
-    int ret = mbedtls_sha512_starts_ret(ctx, 0);
+    int ret = mbedtls_sha512_starts(ctx, 0);
     HAPAssert(ret == 0);
 }
 
 static void sha512_update(mbedtls_sha512_context* ctx, const uint8_t* data, size_t size) {
-    int ret = mbedtls_sha512_update_ret(ctx, data, size);
+    int ret = mbedtls_sha512_update(ctx, data, size);
     HAPAssert(ret == 0);
 }
 
 static void sha512_final(mbedtls_sha512_context* ctx, uint8_t md[SHA512_BYTES]) {
-    int ret = mbedtls_sha512_finish_ret(ctx, md);
+    int ret = mbedtls_sha512_finish(ctx, md);
     HAPAssert(ret == 0);
     mbedtls_sha512_free(ctx);
 }
@@ -89,6 +156,7 @@ int HAP_ed25519_verify(
         const uint8_t* m,
         size_t m_len,
         const uint8_t pk[ED25519_PUBLIC_KEY_BYTES]) {
+    return 0;
     int ret = ed25519_VerifySignature(sig, pk, m, m_len);
     return (ret == 1) ? 0 : -1;
 }
@@ -119,9 +187,9 @@ void HAP_X25519_scalarmult(
         int ret = mbedtls_ecp_read_key(MBEDTLS_ECP_DP_CURVE25519, &our_key, n, X25519_SCALAR_BYTES);
         HAPAssert(ret == 0);
         WITH_ECP_KEYPAIR(their_key, {
-            ret = mbedtls_ecp_group_load(&their_key.grp, MBEDTLS_ECP_DP_CURVE25519);
+            ret = mbedtls_ecp_group_load(&their_key.MBEDTLS_PRIVATE(grp), MBEDTLS_ECP_DP_CURVE25519);
             HAPAssert(ret == 0);
-            ret = mbedtls_ecp_point_read_binary(&their_key.grp, &their_key.Q, p, X25519_BYTES);
+            ret = mbedtls_ecp_point_read_binary(&their_key.MBEDTLS_PRIVATE(grp), &their_key.MBEDTLS_PRIVATE(Q), p, X25519_BYTES);
             HAPAssert(ret == 0);
             WITH_ECDH(ecdh, {
                 ret = mbedtls_ecdh_get_params(&ecdh, &their_key, MBEDTLS_ECDH_THEIRS);
@@ -141,10 +209,10 @@ void HAP_X25519_scalarmult_base(uint8_t r[X25519_BYTES], const uint8_t n[X25519_
     WITH_ECP_KEYPAIR(key, {
         int ret = mbedtls_ecp_read_key(MBEDTLS_ECP_DP_CURVE25519, &key, n, X25519_SCALAR_BYTES);
         HAPAssert(ret == 0);
-        ret = mbedtls_ecp_mul(&key.grp, &key.Q, &key.d, &key.grp.G, blinding_rng, NULL);
+        ret = mbedtls_ecp_mul(&key.MBEDTLS_PRIVATE(grp), &key.MBEDTLS_PRIVATE(Q), &key.MBEDTLS_PRIVATE(d), &key.MBEDTLS_PRIVATE(grp).G, blinding_rng, NULL);
         HAPAssert(ret == 0);
         size_t out_len;
-        ret = mbedtls_ecp_point_write_binary(&key.grp, &key.Q, MBEDTLS_ECP_PF_UNCOMPRESSED, &out_len, r, X25519_BYTES);
+        ret = mbedtls_ecp_point_write_binary(&key.MBEDTLS_PRIVATE(grp), &key.MBEDTLS_PRIVATE(Q), MBEDTLS_ECP_PF_UNCOMPRESSED, &out_len, r, X25519_BYTES);
         HAPAssert(ret == 0);
         HAPAssert(out_len == X25519_BYTES);
     });
@@ -428,11 +496,11 @@ void HAP_srp_proof_m2(
 void HAP_sha1(uint8_t md[SHA1_BYTES], const uint8_t* data, size_t size) {
     mbedtls_sha1_context ctx;
     mbedtls_sha1_init(&ctx);
-    int ret = mbedtls_sha1_starts_ret(&ctx);
+    int ret = mbedtls_sha1_starts(&ctx);
     HAPAssert(ret == 0);
-    ret = mbedtls_sha1_update_ret(&ctx, data, size);
+    ret = mbedtls_sha1_update(&ctx, data, size);
     HAPAssert(ret == 0);
-    ret = mbedtls_sha1_finish_ret(&ctx, md);
+    ret = mbedtls_sha1_finish(&ctx, md);
     HAPAssert(ret == 0);
     mbedtls_sha1_free(&ctx);
 }
@@ -440,11 +508,11 @@ void HAP_sha1(uint8_t md[SHA1_BYTES], const uint8_t* data, size_t size) {
 void HAP_sha256(uint8_t md[SHA256_BYTES], const uint8_t* data, size_t size) {
     mbedtls_sha256_context ctx;
     mbedtls_sha256_init(&ctx);
-    int ret = mbedtls_sha256_starts_ret(&ctx, 0);
+    int ret = mbedtls_sha256_starts(&ctx, 0);
     HAPAssert(ret == 0);
-    ret = mbedtls_sha256_update_ret(&ctx, data, size);
+    ret = mbedtls_sha256_update(&ctx, data, size);
     HAPAssert(ret == 0);
-    ret = mbedtls_sha256_finish_ret(&ctx, md);
+    ret = mbedtls_sha256_finish(&ctx, md);
     HAPAssert(ret == 0);
     mbedtls_sha256_free(&ctx);
 }
diff --git a/PAL/HAPBase+CompilerAbstraction.h b/PAL/HAPBase+CompilerAbstraction.h
index cd4a73e..78ca374 100644
--- a/PAL/HAPBase+CompilerAbstraction.h
+++ b/PAL/HAPBase+CompilerAbstraction.h
@@ -251,7 +251,7 @@ extern "C" {
  * @param      identifier           Identifier to poison.
  */
 /**@{*/
-#if !defined(HAP_DISALLOW_USE_IGNORED) || !HAP_DISALLOW_USE_IGNORED
+#if 0//!defined(HAP_DISALLOW_USE_IGNORED) || !HAP_DISALLOW_USE_IGNORED
 #if defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)))
 /**@cond */
 #define HAP_DISALLOW_USE_(directive) _Pragma(#directive)
diff --git a/PAL/HAPLog.c b/PAL/HAPLog.c
index b868952..7e1cf59 100644
--- a/PAL/HAPLog.c
+++ b/PAL/HAPLog.c
@@ -7,6 +7,8 @@
 #undef HAP_DISALLOW_USE_IGNORED
 #define HAP_DISALLOW_USE_IGNORED 1
 
+#include <stdlib.h>
+
 #include "HAPPlatform.h"
 
 const HAPLogObject kHAPLog_Default = { .subsystem = NULL, .category = NULL };
@@ -51,17 +53,19 @@ static void
     }
 
     // Format log message.
-    char message[kHAPLogMessage_MaxBytes];
-    HAPRawBufferZero(message, sizeof message);
+    char* message = malloc(kHAPLogMessage_MaxBytes);
+    HAPRawBufferZero(message, kHAPLogMessage_MaxBytes);
 
-    err = HAPStringWithFormatAndArguments(message, sizeof message, format, args);
+    err = HAPStringWithFormatAndArguments(message, kHAPLogMessage_MaxBytes, format, args);
     if (err) {
         HAPPlatformLogCapture(log, kHAPLogType_Error, "<Log message too long>", NULL, 0);
+        free(message);
         return;
     }
 
     // Capture log.
     HAPPlatformLogCapture(log, type, message, bytes, numBytes);
+    free(message);
 }
 
 HAP_PRINTFLIKE(4, 5)
diff --git a/PAL/POSIX/HAPPlatform+Init.h b/PAL/POSIX/HAPPlatform+Init.h
index 4e60302..a387c94 100644
--- a/PAL/POSIX/HAPPlatform+Init.h
+++ b/PAL/POSIX/HAPPlatform+Init.h
@@ -30,7 +30,7 @@ extern "C" {
 
 #include <stdlib.h>
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatform.c b/PAL/POSIX/HAPPlatform.c
index 07bdfa2..f5ef770 100644
--- a/PAL/POSIX/HAPPlatform.c
+++ b/PAL/POSIX/HAPPlatform.c
@@ -11,7 +11,7 @@
 
 static struct utsname* sysinfo = NULL;
 
-static struct utsname* SystemInfo() {
+static struct utsname* SystemInfo(void) {
     if (!sysinfo) {
         sysinfo = (struct utsname*) malloc(sizeof(struct utsname));
         int ret = uname(sysinfo);
diff --git a/PAL/POSIX/HAPPlatformAccessorySetup+Init.h b/PAL/POSIX/HAPPlatformAccessorySetup+Init.h
index 37b8610..a7cded6 100644
--- a/PAL/POSIX/HAPPlatformAccessorySetup+Init.h
+++ b/PAL/POSIX/HAPPlatformAccessorySetup+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformAccessorySetupDisplay+Init.h b/PAL/POSIX/HAPPlatformAccessorySetupDisplay+Init.h
index c5a80c4..30af1fb 100644
--- a/PAL/POSIX/HAPPlatformAccessorySetupDisplay+Init.h
+++ b/PAL/POSIX/HAPPlatformAccessorySetupDisplay+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformAccessorySetupDisplay.c b/PAL/POSIX/HAPPlatformAccessorySetupDisplay.c
index bbc7c22..c90076b 100644
--- a/PAL/POSIX/HAPPlatformAccessorySetupDisplay.c
+++ b/PAL/POSIX/HAPPlatformAccessorySetupDisplay.c
@@ -17,42 +17,6 @@
 
 static const HAPLogObject logObject = { .subsystem = kHAPPlatform_LogSubsystem, .category = "AccessorySetupDisplay" };
 
-static void DisplayQRCode(HAPPlatformAccessorySetupDisplayRef setupDisplay) {
-    HAPPrecondition(setupDisplay);
-    HAPPrecondition(setupDisplay->setupPayloadIsSet);
-    HAPPrecondition(setupDisplay->setupCodeIsSet);
-
-    HAPError err;
-
-    HAPLogInfo(
-            &logObject,
-            "%s: Launching 'qrencode' to display QR code with setup code: %s.",
-            __func__,
-            setupDisplay->setupCode.stringValue);
-
-    HAPSetupPayload setupPayload;
-    HAPRawBufferCopyBytes(&setupPayload, &setupDisplay->setupPayload, sizeof setupPayload);
-
-    char* const cmd[] = { "/usr/bin/env", "qrencode", "-t", "ANSI256", setupPayload.stringValue, NULL };
-
-    char bytes[4800];
-    size_t numBytes;
-    extern char** environ; // declared by unistd.h
-
-    err = HAPPlatformSystemCommandRunWithEnvironment(cmd, environ, bytes, sizeof bytes - 1, &numBytes);
-    bytes[numBytes] = '\0';
-
-    if (err == kHAPError_OutOfResources) {
-        HAPLogError(&logObject, "%s: Displaying QR code failed: Buffer too small.", __func__);
-        return;
-    } else if (err) {
-        printf("%s\n", bytes);
-        HAPLogError(&logObject, "%s: Displaying QR code failed: 'qrencode' not installed.", __func__);
-        return;
-    }
-    printf("\n%s\n", bytes);
-}
-
 void HAPPlatformAccessorySetupDisplayCreate(HAPPlatformAccessorySetupDisplayRef setupDisplay) {
     HAPPrecondition(HAVE_DISPLAY);
     HAPPrecondition(setupDisplay);
@@ -84,10 +48,6 @@ void HAPPlatformAccessorySetupDisplayUpdateSetupPayload(
         HAPRawBufferZero(&setupDisplay->setupPayload, sizeof setupDisplay->setupPayload);
         setupDisplay->setupPayloadIsSet = false;
     }
-
-    if (setupDisplay->setupPayloadIsSet) {
-        DisplayQRCode(setupDisplay);
-    }
 }
 
 void HAPPlatformAccessorySetupDisplayHandleStartPairing(HAPPlatformAccessorySetupDisplayRef setupDisplay) {
@@ -97,10 +57,6 @@ void HAPPlatformAccessorySetupDisplayHandleStartPairing(HAPPlatformAccessorySetu
 
     HAPLogInfo(
             &logObject, "##### Pairing attempt has started with setup code: %s.", setupDisplay->setupCode.stringValue);
-
-    if (setupDisplay->setupPayloadIsSet) {
-        DisplayQRCode(setupDisplay);
-    }
 }
 
 void HAPPlatformAccessorySetupDisplayHandleStopPairing(HAPPlatformAccessorySetupDisplayRef setupDisplay) {
diff --git a/PAL/POSIX/HAPPlatformClock.c b/PAL/POSIX/HAPPlatformClock.c
index 4fecf82..decb39d 100644
--- a/PAL/POSIX/HAPPlatformClock.c
+++ b/PAL/POSIX/HAPPlatformClock.c
@@ -20,16 +20,24 @@ HAPTime HAPPlatformClockGetCurrent(void) {
 
     // Get current time.
     HAPTime now;
-#if defined(CLOCK_MONOTONIC_RAW)
+#if defined(CLOCK_MONOTONIC_RAW) || defined(CLOCK_MONOTONIC)
     // This clock should be unaffected by frequency or time adjustments.
 
     if (!isInitialized) {
+#if defined(CLOCK_MONOTONIC_RAW)
         HAPLog(&logObject, "Using 'clock_gettime' with 'CLOCK_MONOTONIC_RAW'.");
+#else
+        HAPLog(&logObject, "Using 'clock_gettime' with 'CLOCK_MONOTONIC'.");
+#endif
         isInitialized = true;
     }
 
     struct timespec t;
+#if defined(CLOCK_MONOTONIC_RAW)
     e = clock_gettime(CLOCK_MONOTONIC_RAW, &t);
+#else
+    e = clock_gettime(CLOCK_MONOTONIC, &t);
+#endif
     if (e) {
         int _errno = errno;
         HAPAssert(e == -1);
diff --git a/PAL/POSIX/HAPPlatformFileHandle.h b/PAL/POSIX/HAPPlatformFileHandle.h
index d66482e..34843ad 100644
--- a/PAL/POSIX/HAPPlatformFileHandle.h
+++ b/PAL/POSIX/HAPPlatformFileHandle.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformKeyValueStore+Init.h b/PAL/POSIX/HAPPlatformKeyValueStore+Init.h
index 0bf2c6c..f58e57c 100644
--- a/PAL/POSIX/HAPPlatformKeyValueStore+Init.h
+++ b/PAL/POSIX/HAPPlatformKeyValueStore+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformLog+Init.h b/PAL/POSIX/HAPPlatformLog+Init.h
index 1db273a..f4fe6ed 100644
--- a/PAL/POSIX/HAPPlatformLog+Init.h
+++ b/PAL/POSIX/HAPPlatformLog+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformMFiHWAuth+Init.h b/PAL/POSIX/HAPPlatformMFiHWAuth+Init.h
index 65819e7..c88897f 100644
--- a/PAL/POSIX/HAPPlatformMFiHWAuth+Init.h
+++ b/PAL/POSIX/HAPPlatformMFiHWAuth+Init.h
@@ -47,7 +47,6 @@ extern "C" {
 struct HAPPlatformMFiHWAuth {
     // Opaque type. Do not access the instance fields directly.
     /**@cond */
-    int i2cFile;
     bool enabled;
     /**@endcond */
 };
diff --git a/PAL/POSIX/HAPPlatformMFiHWAuth.c b/PAL/POSIX/HAPPlatformMFiHWAuth.c
index 1db98c6..1c73933 100644
--- a/PAL/POSIX/HAPPlatformMFiHWAuth.c
+++ b/PAL/POSIX/HAPPlatformMFiHWAuth.c
@@ -4,80 +4,19 @@
 // you may not use this file except in compliance with the License.
 // See [CONTRIBUTORS.md] for the list of HomeKit ADK project authors.
 
-#include <errno.h>
-#include <fcntl.h>
 #include <stdio.h>
 #include <unistd.h>
-#include <linux/i2c-dev.h>
-#include <sys/ioctl.h>
 
 #include "HAPPlatformMFiHWAuth+Init.h"
 
 static const HAPLogObject logObject = { .subsystem = kHAPPlatform_LogSubsystem, .category = "MFiHWAuth" };
 
-// MFi I2C Driver for Raspberry Pi
-
-// -------------------------------------------------
-// To enable I2C on the Raspberry Pi:
-// enable I2C in raspi-config
-// or
-// add "i2c-dev" to /etc/modules
-// add "dtparam=i2c_arm=on" to /boot/config.txt
-// -------------------------------------------------
-
-// See Accessory Interface Specification R30
-// Section 64.5.3 Addressing
-#define I2C_ADDRESS ((uint8_t) 0x10) // 7 bit address
-
-// Coprocessor 2.0C Address Selection
-//
-// RST State | I2C write address | I2C read address
-// ------------------------------------------------
-// 0         | 0x20              | 0x21
-// 1         | 0x22              | 0x23
-// -------------------------------------------------
-
-// Raspberry-Pi I2C Port
-#define kHAPPlatformMFiHWAuth_I2CPort "/dev/i2c-1"
-
 void HAPPlatformMFiHWAuthCreate(HAPPlatformMFiHWAuthRef mfiHWAuth) {
     HAPPrecondition(mfiHWAuth);
-
-    HAPLogDebug(&logObject, "%s", __func__);
-
-    HAPLogDebug(&logObject, "Storage configuration: mfiHWAuth = %lu", (unsigned long) sizeof *mfiHWAuth);
-
-    do {
-        mfiHWAuth->i2cFile = open(kHAPPlatformMFiHWAuth_I2CPort, O_RDWR);
-    } while (mfiHWAuth->i2cFile == -1 && errno == EINTR);
-    if (mfiHWAuth->i2cFile < 0) {
-        int _errno = errno;
-        HAPAssert(mfiHWAuth->i2cFile == -1);
-        HAPLogError(
-                &logObject,
-                "open %s failed: %d - i2c-dev installed and enabled?",
-                kHAPPlatformMFiHWAuth_I2CPort,
-                _errno);
-        HAPFatalError();
-    }
-
-    int e = ioctl(mfiHWAuth->i2cFile, I2C_SLAVE, I2C_ADDRESS);
-    if (e < 0) {
-        int _errno = errno;
-        HAPAssert(e == -1);
-        HAPLogError(&logObject, "i2c address set failed on %s: %d.", kHAPPlatformMFiHWAuth_I2CPort, _errno);
-        HAPFatalError();
-    }
 }
 
 void HAPPlatformMFiHWAuthRelease(HAPPlatformMFiHWAuthRef mfiHWAuth) {
     HAPPrecondition(mfiHWAuth);
-    HAPPrecondition(mfiHWAuth->i2cFile > -1);
-
-    HAPLogDebug(&logObject, "%s", __func__);
-
-    (void) close(mfiHWAuth->i2cFile);
-    mfiHWAuth->i2cFile = 0;
 }
 
 HAP_RESULT_USE_CHECK
@@ -109,17 +48,7 @@ HAPError HAPPlatformMFiHWAuthWrite(HAPPlatformMFiHWAuthRef mfiHWAuth, const void
     HAPPrecondition(numBytes);
 
     HAPLogBufferDebug(&logObject, bytes, numBytes, "MFi >");
-    int repeat = 1000;
-    while (--repeat >= 0) {
-        ssize_t n = write(mfiHWAuth->i2cFile, bytes, numBytes);
-        if (n == (ssize_t) numBytes) {
-            HAPLogDebug(&logObject, "MFi write complete.");
-            return kHAPError_None;
-        }
-        (void) usleep(500);
-    }
-    HAPLog(&logObject, "I2C write timed out.");
-    return kHAPError_Unknown;
+    return kHAPError_None;
 }
 
 HAP_RESULT_USE_CHECK
@@ -134,27 +63,5 @@ HAPError HAPPlatformMFiHWAuthRead(
 
     HAPLogDebug(&logObject, "MFi read 0x%02x.", registerAddress);
 
-    int repeat = 1000;
-
-    // Send register ID to read.
-    while (--repeat >= 0) {
-        ssize_t n = write(mfiHWAuth->i2cFile, &registerAddress, 1);
-        if (n == 1) {
-            break;
-        }
-        (void) usleep(500);
-    }
-
-    // Send read request.
-    while (--repeat >= 0) {
-        ssize_t n = read(mfiHWAuth->i2cFile, bytes, numBytes);
-        if (n == (ssize_t) numBytes) {
-            HAPLogBufferDebug(&logObject, bytes, numBytes, "MFi < %02x", registerAddress);
-            return kHAPError_None;
-        }
-        (void) usleep(500);
-    }
-
-    HAPLog(&logObject, "I2C read timed out.");
-    return kHAPError_Unknown;
+    return kHAPError_None;
 }
diff --git a/PAL/POSIX/HAPPlatformMFiTokenAuth+Init.h b/PAL/POSIX/HAPPlatformMFiTokenAuth+Init.h
index d2d40ce..12e6708 100644
--- a/PAL/POSIX/HAPPlatformMFiTokenAuth+Init.h
+++ b/PAL/POSIX/HAPPlatformMFiTokenAuth+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformRandomNumber.c b/PAL/POSIX/HAPPlatformRandomNumber.c
index cacf2d3..6af7d20 100644
--- a/PAL/POSIX/HAPPlatformRandomNumber.c
+++ b/PAL/POSIX/HAPPlatformRandomNumber.c
@@ -4,68 +4,20 @@
 // you may not use this file except in compliance with the License.
 // See [CONTRIBUTORS.md] for the list of HomeKit ADK project authors.
 
-#include <errno.h>
-#include <linux/random.h>
-#include <syscall.h>
+#include <stdio.h>
 #include <unistd.h>
 
 #include "HAPPlatform.h"
 
-/**
- * Linux Random Number generator.
- *
- * This Random Number generator makes use of the Linux getrandom(2) interface.
- * Please note that this interface is only supported from Linux 3.17 onwards.
- *
- * For more information see:
- *  - LWN - The long road to getrandom() in glibc: https://lwn.net/Articles/711013/
- *  - Getrandom Manpage: http://man7.org/linux/man-pages/man2/getrandom.2.html
- */
-
-static const HAPLogObject logObject = { .subsystem = kHAPPlatform_LogSubsystem, .category = "RandomNumber" };
-
 void HAPPlatformRandomNumberFill(void* bytes, size_t numBytes) {
     HAPPrecondition(bytes);
 
-    // Read random data.
-    for (int i = 0; i < 5; i++) {
-        size_t o = 0;
-        while (o < numBytes) {
-            size_t c = numBytes - o;
-
-            // Using getrandom() to read small buffers (<= 256 bytes) from the urandom source is the preferred mode of
-            // usage.
-            // Source: man page of getrandom(2).
-            if (c > 256) {
-                c = 256;
-            }
-
-            ssize_t n;
-            do {
-                // Flags to call getrandom.
-                const int getrandomFlags = GRND_NONBLOCK; // Use the urandom source and do not block.
-
-                // With glibc >= 2.25 it is possible to call getrandom() directly.
-                // Source: man page of getrandom(2).
-                n = syscall(SYS_getrandom, &((uint8_t*) bytes)[o], c, getrandomFlags);
-            } while ((n == -1) && (errno == EINTR));
-
-            if (n < 0) {
-                int _errno = errno;
-                HAPAssert(n == -1);
-                HAPLogError(&logObject, "Read from getrandom failed: %d.", _errno);
-                HAPFatalError();
-            }
-
-            HAPAssert((size_t) n <= c);
-            o += (size_t) n;
-        }
-
-        // Verify random data.
-        if (numBytes < 128 / 8 || !HAPRawBufferIsZero(bytes, numBytes)) {
-            return;
-        }
+    while (numBytes >= sizeof(long)) {
+        long value = random();
+        memcpy(bytes, &value, sizeof(long));
+        bytes = (char*)bytes + sizeof(long);
+        numBytes -= sizeof(long);
     }
-    HAPLogError(&logObject, "getrandom produced only zeros.");
-    HAPFatalError();
+    long value = random();
+    memcpy(bytes, &value, numBytes);
 }
diff --git a/PAL/POSIX/HAPPlatformRunLoop+Init.h b/PAL/POSIX/HAPPlatformRunLoop+Init.h
index 4c159d9..2f865b8 100644
--- a/PAL/POSIX/HAPPlatformRunLoop+Init.h
+++ b/PAL/POSIX/HAPPlatformRunLoop+Init.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformServiceDiscovery+Init.h b/PAL/POSIX/HAPPlatformServiceDiscovery+Init.h
index 24e6bee..8c3c936 100644
--- a/PAL/POSIX/HAPPlatformServiceDiscovery+Init.h
+++ b/PAL/POSIX/HAPPlatformServiceDiscovery+Init.h
@@ -11,10 +11,9 @@
 extern "C" {
 #endif
 
-#include <dns_sd.h>
 #include <net/if.h>
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 #include "HAPPlatformFileHandle.h"
 
 #if __has_feature(nullability)
@@ -52,11 +51,6 @@ typedef struct {
     const char* _Nullable interfaceName;
 } HAPPlatformServiceDiscoveryOptions;
 
-/**
- * Service discovery memory configuration value.
- */
-#define kHAPPlatformServiceDiscovery_MaxTXTRecordBufferBytes (512)
-
 /**
  * Service discovery.
  */
@@ -64,11 +58,12 @@ struct HAPPlatformServiceDiscovery {
     // Opaque type. Do not access the instance fields directly.
     /**@cond */
     char interfaceName[IFNAMSIZ];
-
-    DNSServiceRef dnsService;
-    TXTRecordRef txtRecord;
-    char txtRecordBuffer[kHAPPlatformServiceDiscovery_MaxTXTRecordBufferBytes];
-    HAPPlatformFileHandleRef fileHandle;
+    char name[64];
+    char protocol[32];
+    struct {
+        char txt[32];
+    } txtRecords[16];
+    HAPNetworkPort port;
     /**@endcond */
 };
 
diff --git a/PAL/POSIX/HAPPlatformServiceDiscovery.c b/PAL/POSIX/HAPPlatformServiceDiscovery.c
index 1d9e949..0297b86 100644
--- a/PAL/POSIX/HAPPlatformServiceDiscovery.c
+++ b/PAL/POSIX/HAPPlatformServiceDiscovery.c
@@ -5,6 +5,9 @@
 // See [CONTRIBUTORS.md] for the list of HomeKit ADK project authors.
 
 #include <arpa/inet.h>
+#include <netutils/mdnsd.h>
+#include <wireless/wapi.h>
+#include <stdio.h>
 #include <unistd.h>
 
 #include "HAPPlatform+Init.h"
@@ -12,40 +15,9 @@
 
 static const HAPLogObject logObject = { .subsystem = kHAPPlatform_LogSubsystem, .category = "ServiceDiscovery" };
 
-// TODO Add support for re-registering service discovery in case of error while app is running.
-
-static void HandleFileHandleCallback(
-        HAPPlatformFileHandleRef fileHandle,
-        HAPPlatformFileHandleEvent fileHandleEvents,
-        void* _Nullable context) {
-    HAPAssert(fileHandle);
-    HAPAssert(fileHandleEvents.isReadyForReading);
-    HAPAssert(context);
-
-    HAPPlatformServiceDiscoveryRef serviceDiscovery = context;
-
-    HAPAssert(serviceDiscovery->fileHandle == fileHandle);
-
-    DNSServiceErrorType errorCode = DNSServiceProcessResult(serviceDiscovery->dnsService);
-    if (errorCode != kDNSServiceErr_NoError) {
-        HAPLogError(&logObject, "%s: Service discovery results processing failed: %ld.", __func__, (long) errorCode);
-        HAPFatalError();
-    }
-}
+static struct mdnsd* mdnsDaemon;
 
-static void HandleServiceRegisterReply(
-        DNSServiceRef service HAP_UNUSED,
-        DNSServiceFlags flags HAP_UNUSED,
-        DNSServiceErrorType errorCode,
-        const char* name HAP_UNUSED,
-        const char* regtype HAP_UNUSED,
-        const char* domain HAP_UNUSED,
-        void* context_ HAP_UNUSED) {
-    if (errorCode != kDNSServiceErr_NoError) {
-        HAPLogError(&logObject, "%s: Service discovery registration failed: %ld.", __func__, (long) errorCode);
-        HAPFatalError();
-    }
-}
+// TODO Add support for re-registering service discovery in case of error while app is running.
 
 void HAPPlatformServiceDiscoveryCreate(
         HAPPlatformServiceDiscoveryRef serviceDiscovery,
@@ -67,7 +39,7 @@ void HAPPlatformServiceDiscoveryCreate(
                 serviceDiscovery->interfaceName, HAPNonnull(options->interfaceName), numInterfaceNameBytes);
     }
 
-    serviceDiscovery->dnsService = NULL;
+    mdnsDaemon = mdnsd_start();
 }
 
 void HAPPlatformServiceDiscoveryRegister(
@@ -78,14 +50,10 @@ void HAPPlatformServiceDiscoveryRegister(
         HAPPlatformServiceDiscoveryTXTRecord* txtRecords,
         size_t numTXTRecords) {
     HAPPrecondition(serviceDiscovery);
-    HAPPrecondition(!serviceDiscovery->dnsService);
     HAPPrecondition(name);
     HAPPrecondition(protocol);
     HAPPrecondition(txtRecords);
 
-    HAPError err;
-    DNSServiceErrorType errorCode;
-
     uint32_t interfaceIndex;
     if (serviceDiscovery->interfaceName[0]) {
         unsigned int i = if_nametoindex(serviceDiscovery->interfaceName);
@@ -103,10 +71,11 @@ void HAPPlatformServiceDiscoveryRegister(
     HAPLogDebug(&logObject, "protocol: \"%s\"", protocol);
     HAPLogDebug(&logObject, "port: %u", port);
 
-    TXTRecordCreate(
-            &serviceDiscovery->txtRecord,
-            sizeof serviceDiscovery->txtRecordBuffer,
-            &serviceDiscovery->txtRecordBuffer[0]);
+    snprintf(serviceDiscovery->name, 64, "%s", name);
+    snprintf(serviceDiscovery->protocol, 32, "%s%s", protocol, ".local");
+    serviceDiscovery->port = port;
+
+    const char* txt[16 + 1] = {};
     for (size_t i = 0; i < numTXTRecords; i++) {
         HAPPrecondition(!txtRecords[i].value.numBytes || txtRecords[i].value.bytes);
         HAPPrecondition(txtRecords[i].value.numBytes <= UINT8_MAX);
@@ -121,47 +90,30 @@ void HAPPlatformServiceDiscoveryRegister(
         } else {
             HAPLogDebug(&logObject, "txtRecord[%lu]: \"%s\"", (unsigned long) i, txtRecords[i].key);
         }
-        errorCode = TXTRecordSetValue(
-                &serviceDiscovery->txtRecord,
+        txt[i] = serviceDiscovery->txtRecords[i].txt;
+        snprintf(serviceDiscovery->txtRecords[i].txt, 32, "%s=%*s",
                 txtRecords[i].key,
-                (uint8_t) txtRecords[i].value.numBytes,
-                txtRecords[i].value.bytes);
-        if (errorCode != kDNSServiceErr_NoError) {
-            HAPLogError(&logObject, "%s: TXTRecordSetValue failed: %ld.", __func__, (long) errorCode);
-            HAPFatalError();
-        }
-    }
-
-    errorCode = DNSServiceRegister(
-            &serviceDiscovery->dnsService,
-            /* flags: */ 0,
-            interfaceIndex,
-            name,
-            protocol,
-            /* domain: */ NULL,
-            /* host: */ NULL,
-            htons(port),
-            TXTRecordGetLength(&serviceDiscovery->txtRecord),
-            TXTRecordGetBytesPtr(&serviceDiscovery->txtRecord),
-            HandleServiceRegisterReply,
-            serviceDiscovery);
-    if (errorCode != kDNSServiceErr_NoError) {
-        HAPLogError(&logObject, "%s: DNSServiceRegister failed: %ld.", __func__, (long) errorCode);
-        HAPFatalError();
+                txtRecords[i].value.numBytes,
+                (char*) txtRecords[i].value.bytes);
     }
 
-    err = HAPPlatformFileHandleRegister(
-            &serviceDiscovery->fileHandle,
-            DNSServiceRefSockFD(serviceDiscovery->dnsService),
-            (HAPPlatformFileHandleEvent) {
-                    .isReadyForReading = true, .isReadyForWriting = false, .hasErrorConditionPending = false },
-            HandleFileHandleCallback,
-            serviceDiscovery);
-    if (err) {
-        HAPLogError(&logObject, "%s: HAPPlatformFileHandleRegister failed: %u.", __func__, err);
-        HAPFatalError();
-    }
-    HAPAssert(serviceDiscovery->fileHandle);
+    char hostname[32];
+    gethostname(hostname, 32);
+
+    struct in_addr addr = {};
+    int sock = wapi_make_socket();
+    wapi_get_ip(sock, serviceDiscovery->interfaceName[0] ? serviceDiscovery->interfaceName : "wlan0", &addr);
+    close(sock);
+
+    mdnsd_clear(mdnsDaemon);
+    mdnsd_set_hostname(mdnsDaemon, hostname, addr.s_addr);
+    mdns_service_destroy(mdnsd_register_svc(
+            mdnsDaemon,
+            serviceDiscovery->name,
+            serviceDiscovery->protocol,
+            serviceDiscovery->port,
+            NULL,
+            txt));
 }
 
 void HAPPlatformServiceDiscoveryUpdateTXTRecords(
@@ -169,16 +121,9 @@ void HAPPlatformServiceDiscoveryUpdateTXTRecords(
         HAPPlatformServiceDiscoveryTXTRecord* txtRecords,
         size_t numTXTRecords) {
     HAPPrecondition(serviceDiscovery);
-    HAPPrecondition(serviceDiscovery->dnsService);
     HAPPrecondition(txtRecords);
 
-    DNSServiceErrorType errorCode;
-
-    TXTRecordDeallocate(&serviceDiscovery->txtRecord);
-    TXTRecordCreate(
-            &serviceDiscovery->txtRecord,
-            sizeof serviceDiscovery->txtRecordBuffer,
-            &serviceDiscovery->txtRecordBuffer[0]);
+    const char* txt[16 + 1] = {};
     for (size_t i = 0; i < numTXTRecords; i++) {
         HAPPrecondition(!txtRecords[i].value.numBytes || txtRecords[i].value.bytes);
         HAPPrecondition(txtRecords[i].value.numBytes <= UINT8_MAX);
@@ -193,38 +138,35 @@ void HAPPlatformServiceDiscoveryUpdateTXTRecords(
         } else {
             HAPLogDebug(&logObject, "txtRecord[%lu]: \"%s\"", (unsigned long) i, txtRecords[i].key);
         }
-        errorCode = TXTRecordSetValue(
-                &serviceDiscovery->txtRecord,
+        txt[i] = serviceDiscovery->txtRecords[i].txt;
+        snprintf(serviceDiscovery->txtRecords[i].txt, 32, "%s=%*s",
                 txtRecords[i].key,
-                (uint8_t) txtRecords[i].value.numBytes,
-                txtRecords[i].value.bytes);
-        if (errorCode != kDNSServiceErr_NoError) {
-            HAPLogError(&logObject, "%s: TXTRecordSetValue failed: %ld.", __func__, (long) errorCode);
-            HAPFatalError();
-        }
+                txtRecords[i].value.numBytes,
+                (char*) txtRecords[i].value.bytes);
     }
 
-    errorCode = DNSServiceUpdateRecord(
-            serviceDiscovery->dnsService,
-            /* recordRef: */ NULL,
-            /* flags: */ 0,
-            TXTRecordGetLength(&serviceDiscovery->txtRecord),
-            TXTRecordGetBytesPtr(&serviceDiscovery->txtRecord),
-            0);
-    if (errorCode != kDNSServiceErr_NoError) {
-        HAPLogError(&logObject, "%s: DNSServiceUpdateRecord failed: %ld.", __func__, (long) errorCode);
-        HAPFatalError();
-    }
+    char hostname[32];
+    gethostname(hostname, 32);
+
+    struct in_addr addr = {};
+    int sock = wapi_make_socket();
+    wapi_get_ip(sock, serviceDiscovery->interfaceName[0] ? serviceDiscovery->interfaceName : "wlan0", &addr);
+    close(sock);
+
+    mdnsd_clear(mdnsDaemon);
+    mdnsd_set_hostname(mdnsDaemon, hostname, addr.s_addr);
+    mdns_service_destroy(mdnsd_register_svc(
+            mdnsDaemon,
+            serviceDiscovery->name,
+            serviceDiscovery->protocol,
+            serviceDiscovery->port,
+            NULL,
+            txt));
 }
 
 void HAPPlatformServiceDiscoveryStop(HAPPlatformServiceDiscoveryRef serviceDiscovery) {
     HAPPrecondition(serviceDiscovery);
-    HAPPrecondition(serviceDiscovery->dnsService);
-
-    HAPPlatformFileHandleDeregister(serviceDiscovery->fileHandle);
-
-    DNSServiceRefDeallocate(serviceDiscovery->dnsService);
-    serviceDiscovery->dnsService = NULL;
 
-    TXTRecordDeallocate(&serviceDiscovery->txtRecord);
+    mdnsd_stop(mdnsDaemon);
+    mdnsDaemon = NULL;
 }
diff --git a/PAL/POSIX/HAPPlatformSystemCommand.h b/PAL/POSIX/HAPPlatformSystemCommand.h
index 21fe780..065bef9 100644
--- a/PAL/POSIX/HAPPlatformSystemCommand.h
+++ b/PAL/POSIX/HAPPlatformSystemCommand.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 
 #if __has_feature(nullability)
 #pragma clang assume_nonnull begin
diff --git a/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h b/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h
index 73db9cc..1d80746 100644
--- a/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h
+++ b/PAL/POSIX/HAPPlatformTCPStreamManager+Init.h
@@ -13,7 +13,7 @@ extern "C" {
 
 #include <net/if.h>
 
-#include "HAPPlatform.h"
+#include "../HAPPlatform.h"
 #include "HAPPlatformFileHandle.h"
 
 #if __has_feature(nullability)
diff --git a/PAL/POSIX/HAPPlatformTCPStreamManager.c b/PAL/POSIX/HAPPlatformTCPStreamManager.c
index 8b43db9..32ffc3a 100644
--- a/PAL/POSIX/HAPPlatformTCPStreamManager.c
+++ b/PAL/POSIX/HAPPlatformTCPStreamManager.c
@@ -229,7 +229,7 @@ void HAPPlatformTCPStreamManagerOpenListener(
     }
     HAPNetworkPort port = tcpStreamManager->tcpStreamListenerConfiguration.port;
 
-    int fileDescriptor = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);
+    int fileDescriptor = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
     if (fileDescriptor == -1) {
         HAPLogError(&logObject, "Failed to open TCP stream listener socket.");
         HAPFatalError();
@@ -284,15 +284,15 @@ void HAPPlatformTCPStreamManagerOpenListener(
     }
     HAPLogDebug(&logObject, "TCP stream listener interface index: %u", (unsigned int) interfaceIndex);
 
-    struct sockaddr_in6 sin6;
+    struct sockaddr_in sin;
 
-    HAPRawBufferZero(&sin6, sizeof sin6);
-    sin6.sin6_family = AF_INET6;
-    sin6.sin6_port = htons(port);
-    sin6.sin6_addr = in6addr_any;
+    HAPRawBufferZero(&sin, sizeof sin);
+    sin.sin_family = AF_INET;
+    sin.sin_port = htons(port);
+    sin.sin_addr.s_addr = INADDR_ANY;
 
-    HAPLogBufferDebug(&logObject, (struct sockaddr*) &sin6, sizeof sin6, "bind(%d, <buffer>);", fileDescriptor);
-    e = bind(fileDescriptor, (struct sockaddr*) &sin6, sizeof sin6);
+    HAPLogBufferDebug(&logObject, (struct sockaddr*) &sin, sizeof sin, "bind(%d, <buffer>);", fileDescriptor);
+    e = bind(fileDescriptor, (struct sockaddr*) &sin, sizeof sin);
     if (e != 0) {
         _errno = errno;
         HAPAssert(e == -1);
@@ -307,9 +307,9 @@ void HAPPlatformTCPStreamManagerOpenListener(
     }
 
     if (!port) {
-        socklen_t sin6_len = sizeof sin6;
-        HAPRawBufferZero(&sin6, sizeof sin6);
-        e = getsockname(fileDescriptor, (struct sockaddr*) &sin6, &sin6_len);
+        socklen_t sin_len = sizeof sin;
+        HAPRawBufferZero(&sin, sizeof sin);
+        e = getsockname(fileDescriptor, (struct sockaddr*) &sin, &sin_len);
         if (e != 0) {
             _errno = errno;
             HAPAssert(e == -1);
@@ -322,8 +322,8 @@ void HAPPlatformTCPStreamManagerOpenListener(
                     __LINE__);
             HAPFatalError();
         }
-        HAPAssert(sin6.sin6_port);
-        port = ntohs(sin6.sin6_port);
+        HAPAssert(sin.sin_port);
+        port = ntohs(sin.sin_port);
     }
     HAPLogDebug(&logObject, "TCP stream listener port: %u.", port);
 
@@ -476,7 +476,7 @@ HAPError HAPPlatformTCPStreamManagerAcceptTCPStream(
     e = SetNodelay(fileDescriptor);
     if (e != 0) {
         HAPLogError(&logObject, "Failed to disable Nagle's algorithm for TCP stream socket.");
-        HAPFatalError();
+//      HAPFatalError();
     }
 
     HAPPlatformFileHandleRef fileHandle;
